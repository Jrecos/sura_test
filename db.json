{
  "swagger": "2.0",
  "info": {
    "title": "Face API - v1.0",
    "version": "v1.0",
    "description": "This API is currently available in:\n\n* Australia East - australiaeast.api.cognitive.microsoft.com\n* Brazil South - brazilsouth.api.cognitive.microsoft.com\n* Canada Central - canadacentral.api.cognitive.microsoft.com\n* Central India - centralindia.api.cognitive.microsoft.com\n* Central US - centralus.api.cognitive.microsoft.com\n* East Asia - eastasia.api.cognitive.microsoft.com\n* East US - eastus.api.cognitive.microsoft.com\n* East US 2 - eastus2.api.cognitive.microsoft.com\n* France Central - francecentral.api.cognitive.microsoft.com\n* Japan East - japaneast.api.cognitive.microsoft.com\n* Japan West - japanwest.api.cognitive.microsoft.com\n* Korea Central - koreacentral.api.cognitive.microsoft.com\n* North Central US - northcentralus.api.cognitive.microsoft.com\n* North Europe - northeurope.api.cognitive.microsoft.com\n* South Africa North - southafricanorth.api.cognitive.microsoft.com\n* South Central US - southcentralus.api.cognitive.microsoft.com\n* Southeast Asia - southeastasia.api.cognitive.microsoft.com\n* UK South - uksouth.api.cognitive.microsoft.com\n* West Central US - westcentralus.api.cognitive.microsoft.com\n* West Europe - westeurope.api.cognitive.microsoft.com\n* West US - westus.api.cognitive.microsoft.com\n* West US 2 - westus2.api.cognitive.microsoft.com\n* UAE North - uaenorth.api.cognitive.microsoft.com"
  },
  "host": "westus.api.cognitive.microsoft.com",
  "basePath": "/face/v1.0",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "x-servers": [
    {
      "url": "https://westus.api.cognitive.microsoft.com"
    },
    {
      "url": "https://cognitive-wu.cognitiveservices.azure.com"
    },
    {
      "url": "https://api.ProjectOxford.ai"
    }
  ],
  "paths": {
    "/detect": {
      "post": {
        "description": "Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.\n<ul>\n    <li>No image will be stored. Only the extracted face feature(s) will be stored on server. The faceId is an identifier of the face feature and will be used in\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>,\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a\">Face - Verify</a>, and\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>. The stored face features will expire and be deleted 24 hours after the original detection call.</li>\n    <li>Optional parameters include faceId, landmarks, and attributes. Attributes include age, gender, headPose, smile, facialHair,\n        glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise. Some of the results returned for specific attributes may not be highly accurate.</li>\n    <li>JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.</li>\n    <li>The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.</li>\n    <li>Up to 100 faces can be returned for an image. Faces are ranked by face rectangle size from large to small.</li>\n    <li>For optimal results when querying\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>,\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a\">Face - Verify</a>, and\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a> ('returnFaceId' is true), please use faces that are: frontal, clear, and with a minimum size of 200x200 pixels (100 pixels between eyes).</li>\n    <li>Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to <a href=\"https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model\">How to specify a detection model</a></li>\n    <ul>\n        <li>\n            'detection_01': The default detection model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected.\n        </li>\n        <li>\n            'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. Face attributes and landmarks are disabled if you choose this detection model.\n        </li>\n    </ul>\n    <li>Different 'recognitionModel' values are provided. If follow-up operations like Verify, Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel' parameter. The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter. Once specified, the detected faceIds will be associated with the specified recognition model. More details, please refer to <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model\">How to specify a recognition model</a>.</li>\n    <ul>\n        <li>\n            'recognition_01': The default recognition model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>. All those faceIds created before 2019 March are bonded with this recognition model.\n        </li>\n        <li>\n            'recognition_02': Recognition model released in 2019 March.\n        </li>\n        <li>\n            'recognition_03': Recognition model released in 2020 May. 'recognition_03' is recommended since its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.\n        </li>\n    </ul>\n</ul>\n<h4>Http Method</h4>\nPOST\n",
        "operationId": "563879b61984550f30395236",
        "summary": "Face - Detect",
        "parameters": [
          {
            "name": "returnFaceId",
            "in": "query",
            "description": "Return faceIds of the detected faces or not. The default value is true.",
            "type": "boolean",
            "default": "true",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "name": "returnFaceLandmarks",
            "in": "query",
            "description": "Return face landmarks of the detected faces or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "name": "returnFaceAttributes",
            "in": "query",
            "description": "Analyze and return the one or more specified face attributes in the comma-separated string like \"returnFaceAttributes=age,gender\". Supported face attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise. Face attribute analysis has additional computational and time cost.",
            "type": "string"
          },
          {
            "name": "recognitionModel",
            "in": "query",
            "description": "The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include \"recognition_01\", \"recognition_02\" and \"recognition_03\". The default value is \"recognition_01\". \"recognition_03\" is recommended since its overall accuracy is improved compared with \"recognition_01\" and \"recognition_02\".",
            "type": "string",
            "default": "recognition_01",
            "enum": [
              "recognition_01",
              "recognition_02",
              "recognition_03"
            ]
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include \"detection_01\" or \"detection_02\". The default value is \"detection_01\".",
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "[binary data]"
            },
            "description": "<article class=\"ed_api_param\">\nTo detect in a URL (or binary data) specified image.\n<br/><br/> JSON fields in the request body: <br />\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>url</td><th>String</th><td>URL of input image.</td></tr>\n\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of face entries ranked by face rectangle size in descending order. An empty response indicates\nno faces detected. A face entry may contain the following values depending on input parameters:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>faceId</td>\n            <th>String</th>\n            <td>Unique faceId of the detected face, created by detection API and it will expire 24 hours after the detection call.\n                To return this, it requires \"returnFaceId\" parameter to be true.</td>\n        </tr>\n        <tr>\n            <td>recognitionModel</td>\n            <th>String</th>\n            <td>The 'recognitionModel' associated with this faceId. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td>\n        </tr>\n        <tr>\n            <td>faceRectangle</td>\n            <th>Object</th>\n            <td>A rectangle area for the face location on image.</td>\n        </tr>\n        <tr>\n            <td>faceLandmarks</td>\n            <th>Object</th>\n            <td>An array of 27-point face landmarks pointing to the important positions of face components. To return this, it\n                requires \"returnFaceLandmarks\" parameter to be true.</td>\n        </tr>\n        <tr>\n            <td>faceAttributes</td>\n            <th>Object</th>\n            <td> Face Attributes:\n                <ul>\n                    <li>age: an estimated \"visual age\" number in years. It is how old a person looks like rather than the actual biological age.</li>\n                    <li>gender: male or female.</li>\n                    <li>smile: smile intensity, a number between [0,1].</li>\n                    <li>facialHair: return lengths in three facial hair areas: moustache, beard and sideburns. The length is\n                        a number between [0,1]. 0 for no facial hair in this area, 1 for long or very thick facial hairs\n                        in this area.</li>\n                    <li>headPose: 3-D roll/yaw/pitch angles for face direction.</li>\n                    <li>glasses: glasses type. Values include 'NoGlasses', 'ReadingGlasses', 'Sunglasses', 'SwimmingGoggles'.</li>\n                    <li>emotion: emotion intensity, including neutral, anger, contempt, disgust, fear, happiness, sadness and\n                        surprise.\n                    </li>\n                    <li>hair: group of hair values indicating whether the hair is visible, bald, and hair color if hair is visible.</li>\n                    <li>makeup: whether eye, lip areas are made-up or not.</li>\n                    <li>accessories: accessories around face, including 'headwear', 'glasses' and 'mask'. Empty array means no\n                        accessories detected. Note this is after a face is detected. Large mask could result in no face to\n                        be detected.</li>\n                    <li>blur: face is blurry or not. Level returns 'Low', 'Medium' or 'High'. Value returns a number between\n                        [0,1], the larger the blurrier.</li>\n                    <li>exposure: face exposure level. Level returns 'GoodExposure', 'OverExposure' or 'UnderExposure'.</li>\n                    <li>noise: noise level of face pixels. Level returns 'Low', 'Medium' and 'High'. Value returns a number between\n                        [0,1], the larger the noisier</li>\n                </ul>\n            </td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": "[\n    {\n        \"faceId\": \"c5c24a82-6845-4031-9d5d-978df9175426\",\n        \"recognitionModel\": \"recognition_03\",\n        \"faceRectangle\": {\n            \"width\": 78,\n            \"height\": 78,\n            \"left\": 394,\n            \"top\": 54\n        },\n        \"faceLandmarks\": {\n            \"pupilLeft\": {\n                \"x\": 412.7,\n                \"y\": 78.4\n            },\n            \"pupilRight\": {\n                \"x\": 446.8,\n                \"y\": 74.2\n            },\n            \"noseTip\": {\n                \"x\": 437.7,\n                \"y\": 92.4\n            },\n            \"mouthLeft\": {\n                \"x\": 417.8,\n                \"y\": 114.4\n            },\n            \"mouthRight\": {\n                \"x\": 451.3,\n                \"y\": 109.3\n            },\n            \"eyebrowLeftOuter\": {\n                \"x\": 397.9,\n                \"y\": 78.5\n            },\n            \"eyebrowLeftInner\": {\n                \"x\": 425.4,\n                \"y\": 70.5\n            },\n            \"eyeLeftOuter\": {\n                \"x\": 406.7,\n                \"y\": 80.6\n            },\n            \"eyeLeftTop\": {\n                \"x\": 412.2,\n                \"y\": 76.2\n            },\n            \"eyeLeftBottom\": {\n                \"x\": 413.0,\n                \"y\": 80.1\n            },\n            \"eyeLeftInner\": {\n                \"x\": 418.9,\n                \"y\": 78.0\n            },\n            \"eyebrowRightInner\": {\n                \"x\": 4.8,\n                \"y\": 69.7\n            },\n            \"eyebrowRightOuter\": {\n                \"x\": 5.5,\n                \"y\": 68.5\n            },\n            \"eyeRightInner\": {\n                \"x\": 441.5,\n                \"y\": 75.0\n            },\n            \"eyeRightTop\": {\n                \"x\": 446.4,\n                \"y\": 71.7\n            },\n            \"eyeRightBottom\": {\n                \"x\": 447.0,\n                \"y\": 75.3\n            },\n            \"eyeRightOuter\": {\n                \"x\": 451.7,\n                \"y\": 73.4\n            },\n            \"noseRootLeft\": {\n                \"x\": 428.0,\n                \"y\": 77.1\n            },\n            \"noseRootRight\": {\n                \"x\": 435.8,\n                \"y\": 75.6\n            },\n            \"noseLeftAlarTop\": {\n                \"x\": 428.3,\n                \"y\": 89.7\n            },\n            \"noseRightAlarTop\": {\n                \"x\": 442.2,\n                \"y\": 87.0\n            },\n            \"noseLeftAlarOutTip\": {\n                \"x\": 424.3,\n                \"y\": 96.4\n            },\n            \"noseRightAlarOutTip\": {\n                \"x\": 446.6,\n                \"y\": 92.5\n            },\n            \"upperLipTop\": {\n                \"x\": 437.6,\n                \"y\": 105.9\n            },\n            \"upperLipBottom\": {\n                \"x\": 437.6,\n                \"y\": 108.2\n            },\n            \"underLipTop\": {\n                \"x\": 436.8,\n                \"y\": 111.4\n            },\n            \"underLipBottom\": {\n                \"x\": 437.3,\n                \"y\": 114.5\n            }\n        },\n        \"faceAttributes\": {\n            \"age\": 71.0,\n            \"gender\": \"male\",\n            \"smile\": 0.88,\n            \"facialHair\": {\n                \"moustache\": 0.8,\n                \"beard\": 0.1,\n                \"sideburns\": 0.02\n            },\n            \"glasses\": \"sunglasses\",\n            \"headPose\": {\n                \"roll\": 2.1,\n                \"yaw\": 3,\n                \"pitch\": 1.6\n            },\n            \"emotion\": {\n                \"anger\": 0.575,\n                \"contempt\": 0,\n                \"disgust\": 0.006,\n                \"fear\": 0.008,\n                \"happiness\": 0.394,\n                \"neutral\": 0.013,\n                \"sadness\": 0,\n                \"surprise\": 0.004\n            },\n            \"hair\": {\n                \"bald\": 0.0,\n                \"invisible\": false,\n                \"hairColor\": [\n                    {\"color\": \"brown\", \"confidence\": 1.0},\n                    {\"color\": \"blond\", \"confidence\": 0.88},\n                    {\"color\": \"black\", \"confidence\": 0.48},\n                    {\"color\": \"other\", \"confidence\": 0.11},\n                    {\"color\": \"gray\", \"confidence\": 0.07},\n                    {\"color\": \"red\", \"confidence\": 0.03}\n                ]\n            },\n            \"makeup\": {\n                \"eyeMakeup\": true,\n                \"lipMakeup\": false\n            },\n            \"occlusion\": {\n                \"foreheadOccluded\": false,\n                \"eyeOccluded\": false,\n                \"mouthOccluded\": false\n            },\n            \"accessories\": [\n                {\"type\": \"headWear\", \"confidence\": 0.99},\n                {\"type\": \"glasses\", \"confidence\": 1.0},\n                {\"type\": \"mask\",\" confidence\": 0.87}\n            ],\n            \"blur\": {\n                \"blurLevel\": \"Medium\",\n                \"value\": 0.51\n            },\n            \"exposure\": {\n                \"exposureLevel\": \"GoodExposure\",\n                \"value\": 0.55\n            },\n            \"noise\": {\n                \"noiseLevel\": \"Low\",\n                \"value\": 0.12\n            }\n        }\n    }\n]\n"
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>JSON parsing error. Bad or unrecognizable request JSON body.</td></tr>\n<tr><td>BadArgument</td><td>Invalid argument returnFaceAttributes. Supported values are: age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise in a comma-separated format.\n<tr><td>BadArgument</td><td>'recognitionModel' is invalid.</td></tr>\n<tr><td>BadArgument</td><td>'detectionModel' is invalid.</td></tr>\n<tr><td>BadArgument</td><td>'returnFaceAttributes' is not supported by detection_02.</td></tr>\n<tr><td>BadArgument</td><td>'returnLandmarks' is not supported by detection_02.</td></tr>\n<tr><td>InvalidURL</td><td>Invalid image format or URL. Supported formats include JPEG, PNG, GIF(the first frame) and BMP.</td></tr>\n<tr><td>InvalidURL</td><td>Failed to download image from the specified URL. Remote server error returned.</td></tr>\n<tr><td>InvalidImage</td><td>Decoding error, image format unsupported.</td></tr>\n<tr><td>InvalidImageSize</td><td>Image size is too small. The valid image file size should be larger than or equal to 1KB.</td></tr>\n<tr><td>InvalidImageSize</td><td>Image size is too big. The valid image file size should be no larger than 6MB.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "408": {
            "description": "Operation exceeds maximum execution time.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Content-Type is not in the allowed types: <br/>\n<ol>\n<li>For an image URL, Content-Type should be application/json</li>\n<li>For a local image, Content-Type should be application/octet-stream</li>\n</ol>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/findsimilars": {
      "post": {
        "description": "Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list. faceId\narray contains the faces created by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>, which will expire 24 hours after creation. A \"faceListId\" is created by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b\">FaceList - Create</a> containing persistedFaceIds that will not expire. And a \"largeFaceListId\" is created by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc\">LargeFaceList - Create</a> containing persistedFaceIds that will also not expire. Depending on the input the returned similar\nfaces list contains faceIds or persistedFaceIds ranked by similarity.\n<br/>\n<br/> Find similar has two working modes, \"matchPerson\" and \"matchFace\". \"matchPerson\" is the default mode that it tries to find\nfaces of the same person as possible by using internal same-person thresholds. It is useful to find a known person's other\nphotos. Note that an empty list will be returned if no faces pass the internal thresholds. \"matchFace\" mode ignores same-person\nthresholds and returns ranked similar faces anyway, even the similarity is low. It can be used in the cases like searching\ncelebrity-looking faces.\n<br/>\n<br/>The 'recognitionModel' associated with the query face's faceId should be the same as the 'recognitionModel' used by the target faceId array, face list or large face list.\n<h4>Http Method</h4>\nPOST",
        "operationId": "563879b61984550f30395237",
        "summary": "Face - Find Similar",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"faceId\": \"c5c24a82-6845-4031-9d5d-978df9175426\",\n    \"largeFaceListId\": \"sample_list\",\n    \"maxNumOfCandidatesReturned\": 10,\n    \"mode\": \"matchPerson\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>faceId</td>\n            <th>String</th>\n            <td>faceId of the query face. User needs to call <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call.</td>\n        </tr>\n        <tr>\n            <td>faceListId</td>\n            <th>String</th>\n            <td>An existing user-specified unique candidate face list, created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b\">FaceList - Create</a>. Face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.</td>\n        </tr>\n        <tr>\n            <td>largeFaceListId</td>\n            <th>String</th>\n            <td>An existing user-specified unique candidate large face list, created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc\">LargeFaceList - Create</a>. Large face list contains a set of persistedFaceIds which are persisted and will never expire. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.</td>\n        </tr>\n        <tr>\n            <td>faceIds</td>\n            <th>Array</th>\n            <td>An array of candidate faceIds. All of them are created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. Parameter faceListId, largeFaceListId and faceIds should not be provided at the same time.</td>\n        </tr>\n        <tr>\n            <td>maxNumOfCandidatesReturned (optional)</td>\n            <th>Number</th>\n            <td>Optional parameter.\n                <br /> The number of top similar faces returned.\n                <br /> The valid range is [1, 1000].It defaults to 20. </td>\n        </tr>\n        <tr>\n            <td>mode (optional)</td>\n            <th>String</th>\n            <td>Optional parameter.\n                <br /> Similar face searching mode. It can be \"matchPerson\" or \"matchFace\". It defaults to \"matchPerson\".</td>\n        </tr>\n    </tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of the most similar faces represented in faceId if the input parameter is faceIds or persistedFaceId if the input parameter is faceListId or largeFaceListId.\n<br /><br /> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>persistedFaceId</td><th>String</th><td>persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire. As showed in below response.</td></tr>\n<tr><td>faceId</td><th>String</th><td>faceId of candidate face when find by faceIds. faceId is created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire 24 hours after the detection call. </td></tr>\n<tr><td>confidence</td><th>Number</th><td>Similarity confidence of the candidate face. The higher confidence, the more similar. Range between [0,1].</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": "[\n    {\n        \"persistedFaceId\" : \"015839fb-fbd9-4f79-ace9-7675fc2f1dd9\",\n        \"confidence\" : 0.82\n    },\n    ...\n]"
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>Invalid request body.</td></tr>\n<tr><td>BadArgument</td><td>Mode is invalid.</td></tr>\n<tr><td>BadArgument</td><td>The argument maxNumOfCandidatesReturned is not valid.</td></tr>\n<tr><td>BadArgument</td><td>The length of faceIds is not in a valid range.</td></tr>\n<tr><td>BadArgument</td><td>LargeFaceListId, faceListId and faceIds, not exactly one of them is valid.</td></tr>\n<tr><td>BadArgument</td><td>Face list ID is invalid.</td></tr>\n<tr><td>BadArgument</td><td>Large face list ID is invalid.</td></tr>\n<tr><td>BadArgument</td><td>LargeFaceListId, faceListId and faceIds are all null.</td></tr>\n<tr><td>BadArgument</td><td>2 or more of largeFaceListId, faceListId and faceIds are not null.</td></tr>\n<tr><td>BadArgument</td><td>'recognitionModel' is incompatible.</td></tr>\n<tr><td>FaceNotFound</td><td>Query face cannot be found.</td></tr>\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\n<tr><td>LargeFaceListNotFound</td><td>Large face list is not found.</td></tr>\n<tr><td>LargeFaceListNotTrained</td><td>Large face list is not trained.</td></tr>\n<tr><td>FaceListNotReady</td><td>Face list is empty.</td></tr>\n<tr><td>LargeFaceListTrainingNotFinished</td><td>Large face list training is not finished.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/group": {
      "post": {
        "description": "Divide candidate faces into groups based on face similarity.\n<br/>\n<ul>\n<li>The output is one or more disjointed face groups and a messyGroup. A face group contains faces\nthat have similar looking, often of the same person. Face groups are ranked by\ngroup size, i.e. number of faces. Notice that faces belonging to a same person might be split into several groups in the result.\n</li>\n<li>MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces. The messyGroup will not appear in the result if all faces\nfound their counterparts.</li>\n<li>Group API needs at least 2 candidate faces and 1000 at most. We suggest to try <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a\">Face - Verify</a> when you only have 2 candidate faces.</li>\n<li>The 'recognitionModel' associated with the query faces' faceIds should be the same.</li>\n</ul>\n<h4>Http Method</h4>\nPOST\n",
        "operationId": "563879b61984550f30395238",
        "summary": "Face - Group",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"faceIds\": [\n        \"c5c24a82-6845-4031-9d5d-978df9175426\",\n        \"015839fb-fbd9-4f79-ace9-7675fc2f1dd9\",\n        \"65d083d4-9447-47d1-af30-b626144bf0fb\",\n        \"fce92aed-d578-4d2e-8114-068f8af4492e\",\n        \"30ea1073-cc9e-4652-b1e3-d08fb7b95315\",\n        \"be386ab3-af91-4104-9e6d-4dae4c9fddb7\",\n        \"fbd2a038-dbff-452c-8e79-2ee81b1aa84e\",\n        \"b64d5e15-8257-4af2-b20a-5a750f8940e7\"\n    ]\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>faceIds</td><th>Array</th><td>Array of candidate faceId created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>. The maximum is 1000 faces.</td></tr>\n\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns one or more groups of similar faces (rank by group size) and a messyGroup.\n<br /><br /> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>groups</td><th>Array</th><td>A partition of the original faces based on face similarity. Groups are ranked by number of faces.</td></tr>\n<tr><td>messyGroup</td><th>Array</th><td>Face ids array of faces that cannot find any similar faces from original faces.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "groups": [
                  [
                    "c5c24a82-6845-4031-9d5d-978df9175426",
                    "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                    "fce92aed-d578-4d2e-8114-068f8af4492e",
                    "b64d5e15-8257-4af2-b20a-5a750f8940e7"
                  ],
                  [
                    "65d083d4-9447-47d1-af30-b626144bf0fb",
                    "30ea1073-cc9e-4652-b1e3-d08fb7b95315"
                  ]
                ],
                "messyGroup": [
                  "be386ab3-af91-4104-9e6d-4dae4c9fddb7",
                  "fbd2a038-dbff-452c-8e79-2ee81b1aa84e"
                ]
              }
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>Request body is invalid.</td></tr>\n<tr><td>BadArgument</td><td>The length of faceIds is not in a valid range. Out of range [2, 1000].</td></tr>\n<tr><td>BadArgument</td><td>'recognitionModel' is incompatible.</td></tr>\n<tr><td>FaceNotFound</td><td>Current face is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/identify": {
      "post": {
        "description": "1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.\n<br/>\n<br/> For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in\nthe person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s)\nfor that face ranked by similarity confidence. The person group/large person group should be trained to make it ready for\nidentification. See more in\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249\">PersonGroup - Train</a> and\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4\">LargePersonGroup - Train</a>.\n<br/>\n<br/> Remarks:\n<ul>\n\t<li>The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.</li>\n\t<li>Each person in the person group/large person group could have more than one face, but no more than 248 faces.</li>\n\t<li>Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</li>\n\t<li>Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold. If no person is identified,\n\t\tthe returned candidates will be an empty array.</li>\n\t<li>Try\n\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a> when you need to find similar faces from a face list/large face list instead of a person group/large\n\t\tperson group.</li>\n\t<li>The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target person group or large person group.</li>\n</ul>\n<h4>Http Method</h4>\nPOST",
        "operationId": "563879b61984550f30395239",
        "summary": "Face - Identify",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"largePersonGroupId\": \"sample_group\",\n    \"faceIds\": [\n        \"c5c24a82-6845-4031-9d5d-978df9175426\",\n        \"65d083d4-9447-47d1-af30-b626144bf0fb\"\n    ],\n    \"maxNumOfCandidatesReturned\": 1,\n    \"confidenceThreshold\": 0.5\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>faceIds</td>\n            <th>Array</th>\n            <td> Array of query faces faceIds, created by the <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>. Each of the faces are identified independently. The valid number of faceIds is between [1, 10].</td>\n        </tr>\n        <tr>\n            <td>personGroupId</td>\n            <th>String</th>\n            <td>personGroupId of the target person group, created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\">PersonGroup - Create</a>. Parameter personGroupId and largePersonGroupId should not be provided at the same time.</td>\n        </tr>\n        <tr>\n            <td>largePersonGroupId</td>\n            <th>String</th>\n            <td>largePersonGroupId of the target large person group, created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d\">LargePersonGroup - Create</a>. Parameter personGroupId and largePersonGroupId should not be provided at the same time.</td>\n        </tr>\n        <tr>\n            <td>maxNumOfCandidatesReturned (optional)</td>\n            <th>Number</th>\n            <td>The range of maxNumOfCandidatesReturned is between 1 and 100 (default is 10).</td>\n        </tr>\n        <tr>\n            <td>confidenceThreshold (optional)</td>\n            <th>Number</th>\n            <td>Optional parameter.\n                <br /> Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the identified candidate person(s) for each query face.\n<br/><br/> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>faceId</td><th>String</th><td>faceId of the query face.</td></tr>\n<tr><td>candidates</td><th>Array</th><td>Identified person candidates for that face (ranked by confidence). Array size should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty array. </td></tr>\n<tr><td>personId</td><th>String</th><td>personId of candidate person.</td></tr>\n<tr><td>confidence</td><th>Number</th><td>A float number between 0.0 and 1.0.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": "[\n    {\n        \"faceId\": \"c5c24a82-6845-4031-9d5d-978df9175426\",\n        \"candidates\": [\n            {\n                \"personId\": \"25985303-c537-4467-b41d-bdb45cd95ca1\",\n                \"confidence\": 0.92\n            }\n        ]\n    },\n    {\n        \"faceId\": \"65d083d4-9447-47d1-af30-b626144bf0fb\",\n        \"candidates\": [\n            {\n                \"personId\": \"2ae4935b-9659-44c3-977f-61fac20d0538\",\n                \"confidence\": 0.89\n            }\n        ]\n    }\n]"
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>Invalid request body.</td></tr>\n<tr><td>BadArgument</td><td>The argument maxNumOfCandidatesReturned is not valid. Range is [1,5]</td></tr>\n<tr><td>BadArgument</td><td>The argument confidenceThreshold is not valid. Range is [0, 1]</td></tr>\n<tr><td>BadArgument</td><td>Face ID is invalid.</td></tr>\n<tr><td>BadArgument</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>BadArgument</td><td>Large person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>BadArgument</td><td>'recognitionModel' is incompatible.</td></tr>\n<tr><td>PersonGroupIdAndLargePersonGroupIdBothNotNull</td><td>Large person group ID and person group ID are both not null.</td></tr>\n<tr><td>PersonGroupIdAndLargePersonGroupIdBothNull</td><td>Large person group ID and person group ID are both null.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>LargePersonGroupNotFound</td><td>Large person group is not found.</td></tr>\n<tr><td>FaceNotFound</td><td>Face is not found.</td></tr>\n<tr><td>PersonGroupNotTrained</td><td>Person group not trained.</td></tr>\n<tr><td>LargePersonGroupNotTrained</td><td>Large person group not trained.</td></tr>\n<tr><td>PersonGroupTrainingNotFinished</td><td>Person group is under training.</td></tr>\n<tr><td>LargePersonGroupTrainingNotFinished</td><td>Large person group is under training.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Large Person group is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "409": {
            "description": "Training process is conflict with identify. Try identify again when training is finished.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupTrainingNotFinished",
                  "message": "Large person group is under training."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/verify": {
      "post": {
        "description": "Verify whether two faces belong to a same person or whether one face belongs to a person.\n<br/><br/>\nRemarks:\n<ul>\n<li>Higher face image quality means better identification precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</li>\n<li>For the scenarios that are sensitive to accuracy please make your own judgment.</li>\n<li>The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group or large person group.</li>\n</ul>\n<h4>Http Method</h4>\nPOST\n",
        "operationId": "563879b61984550f3039523a",
        "summary": "Face - Verify",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"faceId\": \"c5c24a82-6845-4031-9d5d-978df9175426\",\n    \"personId\": \"815df99c-598f-4926-930a-a734b3fd651c\",\n    \"largePersonGroupId\": \"sample_group\"\n}\n"
            },
            "description": "JSON fields in face to face verification request body:\n<table class=\"element table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Fields</th>\n\t\t\t<th>Type</th>\n\t\t\t<th>Description</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>faceId1</td>\n\t\t\t<th>String</th>\n\t\t\t<td>faceId of one face, comes from\n\t\t\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>faceId2</td>\n\t\t\t<th>String</th>\n\t\t\t<td>faceId of another face, comes from\n\t\t\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.</td>\n\t\t</tr>\n\t</tbody>\n</table> JSON fields in face to person verification request body:\n<table class=\"element table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Fields</th>\n\t\t\t<th>Type</th>\n\t\t\t<th>Description</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>faceId</td>\n\t\t\t<th>String</th>\n\t\t\t<td>faceId of the face, comes from\n\t\t\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>personGroupId</td>\n\t\t\t<th>String</th>\n\t\t\t<td>Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in\n\t\t\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\">PersonGroup - Create</a>. Parameter personGroupId and largePersonGroupId should not be provided at the same time.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>largePersonGroupId</td>\n\t\t\t<th>String</th>\n\t\t\t<td>Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in\n\t\t\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d\">LargePersonGroup - Create</a>. Parameter personGroupId and largePersonGroupId should not be provided at the same time.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>personId</td>\n\t\t\t<th>String</th>\n\t\t\t<td>Specify a certain person in a person group or a large person group. personId is created in\n\t\t\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c\">PersonGroup Person - Create</a> or\n\t\t\t\t<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40\">LargePersonGroup Person - Create</a>.</td>\n\t\t</tr>\n\t</tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the verification result.\n<br /><br /> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>isIdentical</td><th>Boolean</th><td>True if the two faces belong to the same person or the face belongs to the person, otherwise false.</td></tr>\n<tr><td>confidence</td><th>Number</th><td>A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5. This is useful for advanced users to override \"isIdentical\" and fine-tune the result on their own data.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "isIdentical": true,
                "confidence": 0.9
              }
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Error Code</th>\n\t\t\t<th>Error Message Description</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>BadArgument</td>\n\t\t\t<td>Bad and unrecognizable JSON body.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BadArgument</td>\n\t\t\t<td>Face ID is invalid. faceId1, faceId2 or faceId is invalid and valid faceId comes from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>. </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BadArgument</td>\n\t\t\t<td>Person ID is invalid. Valid personId is generated from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c\">PersonGroup Person - Create</a> or <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40\">LargePersonGroup Person - Create</a> for existing person.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BadArgument</td>\n\t\t\t<td>Request body is invalid.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BadArgument</td>\n\t\t\t<td>Person group ID or Large Perosn Group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BadArgument</td>\n\t\t\t<td>'recognitionModel' is incompatible.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Error Code</th>\n\t\t\t<th>Error Message Description</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>FaceNotFound</td>\n\t\t\t<td>Face is not found. The faceId is expired or not exist.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PersonNotFound</td>\n\t\t\t<td>Person is not found.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>PersonGroupNotFound</td>\n\t\t\t<td>Person Group is not found.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LargePersonGroupNotFound</td>\n\t\t\t<td>Large Person Group is not found.</td>\n\t\t</tr>\n\t</tbody>\n\t</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedFaces": {
      "post": {
        "description": "Add a face to a specified face list, up to 1,000 faces.\n<br /> To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns\na persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395251\">FaceList - Delete Face</a> or\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f\">FaceList - Delete</a> is called.\n<br /> Note persistedFaceId is different from faceId generated by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.\n<ul>\n    <li>Higher face image quality means better detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</li>\n    <li>JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.</li>\n    <li>\"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided\n        \"targetFace\" rectangle is not returned from\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>, there’s no guarantee to detect and add the face successfully.</li>\n    <li>Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.</li>\n    <li>Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.</li>\n    <li>The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.</li>\n    <li>Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to <a href=\"https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model\">How to specify a detection model</a></li>\n    <ul>\n        <li>\n            'detection_01': The default detection model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250\">FaceList - Add Face</a>. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected.\n        </li>\n        <li>\n            'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces.\n        </li>\n    </ul>\n</ul>\n<h4>Http Method</h4>\nPOST",
        "operationId": "563879b61984550f30395250",
        "summary": "FaceList - Add Face",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-specified data about the face list for any purpose. The maximum length is 1KB.",
            "type": "string"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added into the face list, in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
            "type": "string"
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include \"detection_01\" or \"detection_02\". The default value is \"detection_01\".",
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "[binary data]"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Fields</th>\n\t\t\t<th>Type</th>\n\t\t\t<th>Description</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>url</td>\n\t\t\t<th>String</th>\n\t\t\t<td>Image url. Image file size should be between 1KB and 6MB. Only one face is allowed per image.</td>\n\t\t</tr>\n\t</tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns a new persistedFaceId.\n<br/><br/> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>persistedFaceId</td><th>String</th><td>persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA"
              }
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Argument targetFace out of range, targetFace is valid but it's intersection with the entire image is empty.</td></tr>\n<tr><td>BadArgument</td><td>Invalid argument targetFace. Caused by invalid string format or invalid left/top/height/width value.</td></tr>\n<tr><td>BadArgument</td><td>'detectionModel' is invalid.</td></tr>\n<tr><td>InvalidURL</td><td>Invalid image URL.</td></tr>\n<tr><td>InvalidURL</td><td>Failed to download from target server. Remote server error returned.</td></tr>\n<tr><td>InvalidImage</td><td>There is more than 1 face in the image or in the specified targetFace area. </td></tr>\n<tr><td>InvalidImage</td><td>No face detected in the image or in the specified targetFace area.</td></tr>\n<tr><td>InvalidImage</td><td>Decoding error, image format unsupported.</td></tr>\n<tr><td>InvalidImageSize</td><td>Image size is too small.</td></tr>\n<tr><td>InvalidImageSize</td><td>Image size is too big.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "JSON parsing error."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "\nPersisted face number reached limit, maximum is 1000 per face list.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Face number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list is not found."
                }
              }
            }
          },
          "408": {
            "description": "\nOperation exceeds maximum execution time.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "415": {
            "description": "Unsupported media type error. Content-Type is not in the allowed types:\n<br/>\n<ol>\n\t<li>For an image URL, Content-Type should be application/json.</li>\n\t<li>For a local image, Content-Type should be application/octet-stream.</li>\n</ol>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/facelists/{faceListId}": {
      "put": {
        "description": "Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to 64 face lists are allowed\nin one subscription.\n<br /> Face list is a list of faces, up to 1,000 faces, and used by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\n<br /> After creation, user should use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250\">FaceList - Add Face</a> to import the faces. No image will be stored. Only the extracted face feature(s) will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f\">FaceList - Delete</a> is called.\n<br /> Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification.\nBut if the actual use is to identify person, please use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\">PersonGroup</a> /\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d\">LargePersonGroup</a> and\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>.\n<br /> Please consider\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc\">LargeFaceList</a> when the face number is large. It can support up to 1,000,000 faces.\n<br />\n<br />'recognitionModel' should be specified to associate with this face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing face list will use the recognition model that's already associated with the collection. Existing face feature(s) in a face list can't be updated to features extracted by another version of recognition model.\n<ul>\n    <li>\n        'recognition_01': The default recognition model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b\">FaceList- Create</a>. All those face lists created before 2019 March are bonded with this recognition model.\n    </li>\n    <li>\n        'recognition_02': Recognition model released in 2019 March.\n    </li>\n    <li>\n        'recognition_03': Recognition model released in 2020 May. 'recognition_03' is recommended since its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.\n    </li>\n</ul>\n<h4>Http Method</h4>\nPUT",
        "operationId": "563879b61984550f3039524b",
        "summary": "FaceList - Create",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"sample_list\",\n    \"userData\": \"User-provided data attached to the face list.\",\n    \"recognitionModel\": \"recognition_03\"\n}"
            },
            "description": "\nJSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>name</td><th>String</th><td>Name of the created face list, maximum length is 128.</td></tr>\n<tr><td>userData (optional)</td><th>String</th><td>Optional user defined data for the face list. Length should not exceed 16KB.</td></tr>\n<tr><td>recognitionModel (optional)</td><th>String</th><td>The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include \"recognition_01\", \"recognition_02\" and \"recognition_03\". The default value is \"recognition_01\". \"recognition_03\" is recommended since its overall accuracy is improved compared with \"recognition_01\" and \"recognition_02\".</td></tr>\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n<tr><td>BadArgument</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>BadArgument</td><td>'recognitionModel' is invalid.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "Face list number reached limit, maximum is 64.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Face list number reached limit."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>FaceListExists</td><td>Face list already exists.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListExists",
                  "message": "Face list already exists."
                }
              }
            }
          },
          "415": {
            "description": "\nUnsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specified face list.\n<h4>Http Method</h4>\nDELETE",
        "operationId": "563879b61984550f3039524f",
        "summary": "FaceList - Delete",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f3039524c",
        "summary": "FaceList - Get",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns the face list's information.\n<br/><br/> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>faceListId</td><th>String</th><td>faceListId of the target face list.</td></tr>\n<tr><td>name</td><th>String</th><td>Face list's display name.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to this face list.</td></tr>\n<tr><td>recognitionModel</td><th>String</th><td>The 'recognitionModel' associated with this face list. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td></tr>\n<tr><td>persistedFaces</td><th>Array</th><td>Faces in the face list.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": "{\n    \"faceListId\": \"sample_list\",\n    \"name\": \"list1\",\n    \"userData\": \"User-provided data attached to the face list.\",\n    \"recognitionModel\": \"recognition_03\",\n    \"persistedFaces\": [\n       {\n          \"persistedFaceId\": \"B8D802CF-DD8F-4E61-B15C-9E6C5844CCBD\",\n          \"userData\": \"User-provided data attached to the face.\"\n       },\n       …\n    ]\n}"
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersistedFaceListNotFound</td><td>Persisted face list ID is invalid.</td></tr>\n<tr><td>PersistedFaceListNotFound</td><td>Persisted face list is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update information of a face list, including name and userData.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "563879b61984550f3039524e",
        "summary": "FaceList - Update",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"list1\",\n    \"userData\": \"User-provided data attached to the face list.\"\n}"
            },
            "description": "\nJSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>name</td><th>String</th><td>Name of the face list, maximum length is 128</td></tr>\n<tr><td>userData (optional)</td><th>String</th><td>Optional user defined data for the face list. Length should not exceed 16KB</td></tr>\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-' and '_'. and no longer than 64 characters.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceListNotFound",
                  "message": "Face list is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "415": {
            "description": "\nUnsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/facelists/{faceListId}/persistedFaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a face list by specified faceListId and persistedFaceId.\n<br /> Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.\n<h4>Http Method</h4>\nDELETE",
        "operationId": "563879b61984550f30395251",
        "summary": "FaceList - Delete Face",
        "parameters": [
          {
            "name": "faceListId",
            "in": "path",
            "description": "faceListId of an existing face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>FaceListNotFound</td><td>Face list is not found.</td></tr>\n<tr><td>FaceListNotFound</td><td>Face list ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersistedFaceNotFound</td><td>Persisted face is not found.</td></tr>\n<tr><td>PersistedFaceNotFound</td><td>Persisted face ID is invalid.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "FaceListNotFound",
                  "message": "Face list is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/facelists": {
      "get": {
        "description": "List face lists’ faceListId, name, userData and recognitionModel.\n<br /> To get face information inside faceList use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c\">FaceList - Get</a>.\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f3039524d",
        "summary": "FaceList - List",
        "parameters": [
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns an array of faceList.\n<br /><br /> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>faceListId</td><th>String</th><td>Face list ID</td></tr>\n<tr><td>name</td><th>String</th><td>Face list name which user assigned</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the face list</td></tr>\n<tr><td>recognitionModel</td><th>String</th><td>The 'recognitionModel' associated with this face list. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": "[\n   {\n       \"faceListId\": \"sample_list\",\n       \"name\": \"list1\",\n       \"userData\": \"User-provided data attached to the face list.\",\n       \"recognitionModel\": \"recognition_03\"\n    },\n    …\n]"
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedFaces": {
      "post": {
        "description": "Add a face to a person into a person group for face identification or verification. To deal with an image containing\nmultiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the\nadded face. No image will be stored. Only the extracted face feature(s) will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523e\">PersonGroup PersonFace - Delete</a>,\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d\">PersonGroup Person - Delete</a> or\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245\">PersonGroup - Delete</a> is called.\n<br /> Note persistedFaceId is different from faceId generated by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.\n<ul>\n    <li>Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and\n        face size is 200x200 pixels (100 pixels between eyes) or bigger.</li>\n    <li>Each person entry can hold up to 248 faces.</li>\n    <li>JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.</li>\n    <li>\"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided\n        \"targetFace\" rectangle is not returned from\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>, there’s no guarantee to detect and add the face successfully.</li>\n    <li>Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.</li>\n    <li>Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons\n        are processed in parallel.</li>\n    <li>The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.</li>\n    <li>Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to <a href=\"https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model\">How to specify a detection model</a></li>\n    <ul>\n        <li>\n            'detection_01': The default detection model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\">PersonGroup Person - Add Face</a>. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected.\n        </li>\n        <li>\n            'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces.\n        </li>\n    </ul>\n</ul>\n<h4>Http Method</h4>\nPOST",
        "operationId": "563879b61984550f3039523b",
        "summary": "PersonGroup Person - Add Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Target person that the face is added to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-specified data about the target face to add for any purpose. The maximum length is 1KB.",
            "type": "string"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
            "type": "string"
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include \"detection_01\" or \"detection_02\". The default value is \"detection_01\".",
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    [binary data]\n}"
            },
            "description": "\n<br/><br/> JSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>url</td><th>String</th><td>Face image URL. Valid image size is from 1KB to 6MB. Only one face is allowed per image.</td></tr>\n\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns the new persistedFaceId.\n<br/><br/> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>persistedFaceId</td><th>String</th><td>persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call. </td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "persistedFaceId": "B8D802CF-DD8F-4E61-B15C-9E6C5844CCBA"
              }
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Invalid request body.</td></tr>\n<tr><td>BadArgument</td><td>Argument targetFace out of range, targetFace is valid but it's intersection with the entire image is empty.</td></tr>\n<tr><td>BadArgument</td><td>Invalid argument targetFace. Caused by invalid string format or invalid left/top/height/width value. </td></tr>\n<tr><td>BadArgument</td><td>'detectionModel' is invalid.</td></tr>\n<tr><td>InvalidImage</td><td>Decoding error, image format unsupported.</td></tr>\n<tr><td>InvalidImage</td><td>No face detected in the image or in the specified targetFace area.</td></tr>\n<tr><td>InvalidImage</td><td>There is more than 1 face in the image or in the specified targetFace area.</td></tr>\n<tr><td>InvalidImageSize</td><td>Image size is too small.</td></tr>\n<tr><td>InvalidImageSize</td><td>Image size is too big.</td></tr>\n<tr><td>InvalidURL</td><td>Invalid image URL.</td></tr>\n<tr><td>InvalidURL</td><td>Failed to download from target server. Remote server error returned.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Request body is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "\nPersisted face number reached limit, maximum is 248 per person.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Persisted face number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "408": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "415": {
            "description": "\nUnsupported media type error. Content-Type is not in the allowed types: <br/>\n<ol>\n<li>For an image URL, Content-Type should be application/json</li>\n<li>For a local image, Content-Type should be application/octet-stream</li>\n</ol>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons": {
      "post": {
        "description": "Create a new person in a specified person group. To add face to this person, please call\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\">PersonGroup PersonFace - Add</a>.\n<br/>\n<ul>\n    <li>Free-tier subscription quota:\n        <ul>\n            <li>1,000 persons in all person groups.</li>\n        </ul>\n    </li>\n    <li>S0-tier subscription quota:\n        <ul>\n            <li>10,000 persons per person group.</li>\n            <li>1,000,000 person groups.</li>\n            <li>100,000,000 persons in all person groups.</li>\n        </ul>\n    </li>\n</ul>\n<h4>Http Method</h4>\nPOST",
        "operationId": "563879b61984550f3039523c",
        "summary": "PersonGroup Person - Create",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the target person group to create the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"Person1\",\n    \"userData\": \"User-provided data attached to the person.\"\n}"
            },
            "description": "\nJSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>name</td><th>String</th><td>Display name of the target person. The maximum length is 128.</td></tr>\n<tr><td>userData (optional)</td><th>String</th><td>Optional fields for user-provided data attached to a person. Size limit is 16KB.</td></tr>\n\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns a new personId created.\n<br/><br/>\nJSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>personId</td><th>String</th><td>personID of the new created person.</td></tr>\n\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "personId": "25985303-c537-4467-b41d-bdb45cd95ca1"
              }
            }
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "Person number reached subscription level limit or person group level limit.\nFree tier subscriptions have a limit of 1,000 persons per Person Group and 1,000 persons total per subscription. The S0 tier subscriptions have these limits: 10,000 Persons per Person Group, 100M Persons total and 1M Person Groups per subscription.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Person number reached subscription level limit."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Face list is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "List all persons’ information in the specified person group, including personId, name, userData and persistedFaceIds of registered\nperson faces.\n<ul>\n    <li>Persons are stored in alphabetical order of personId created in\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c\">PersonGroup Person - Create</a>.</li>\n    <li>\"start\" parameter (string, optional) is a personId value that returned entries have larger ids by string comparison.\n        \"start\" set to empty to indicate return from the first item.</li>\n    <li>\"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned\n        in one call. To fetch more, you can specify \"start\" with the last returned entry’s personId of the current call.</li>\n</ul>\nFor example, total 5 persons with their personId: \"personId1\", ..., \"personId5\".\n<br /> \"start=&top=\" will return all 5 persons.\n<br /> \"start=&top=2\" will return \"personId1\", \"personId2\".\n<br /> \"start=personId2&top=3\" will return \"personId3\", \"personId4\", \"personId5\".\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f30395241",
        "summary": "PersonGroup Person - List",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of the target person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List persons from the least personId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of persons to list, ranging in [1, 1000]. Default is 1000.",
            "type": "integer",
            "default": "1000",
            "enum": [
              "1000"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns an array of person information that belong to the person group.\n<br/><br/> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>personId</td><th>String</th><td>personId of the person in the person group.</td></tr>\n<tr><td>name</td><th>String</th><td>Person's display name.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the person.</td></tr>\n<tr><td>persistedFaceIds</td><th>Array</th><td>persistedFaceId array of registered faces of the person.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": "[\n    {\n        \"personId\": \"25985303-c537-4467-b41d-bdb45cd95ca1\",\n        \"name\": \"Ryan\",\n        \"userData\": \"User-provided data attached to the person.\",\n        \"persistedFaceIds\": [\n          \"015839fb-fbd9-4f79-ace9-7675fc2f1dd9\",\n          \"fce92aed-d578-4d2e-8114-068f8af4492e\",\n          \"b64d5e15-8257-4af2-b20a-5a750f8940e7\"\n        ]\n    },\n    {\n        \"personId\": \"2ae4935b-9659-44c3-977f-61fac20d0538\",\n        \"name\": \"David\",\n        \"userData\": \"User-provided data attached to the person.\",\n            \"persistedFaceIds\": [\n            \"30ea1073-cc9e-4652-b1e3-d08fb7b95315\",\n            \"fbd2a038-dbff-452c-8e79-2ee81b1aa84e\"\n        ]\n    }\n]"
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}": {
      "delete": {
        "description": "Delete an existing person from a person group. The persistedFaceId, userData, person name and face feature(s) in the person entry will all be deleted.\n<h4>Http Method</h4>\nDELETE",
        "operationId": "563879b61984550f3039523d",
        "summary": "PersonGroup Person - Delete",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "The target personId to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns an empty response body.\n"
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature(s).\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f3039523f",
        "summary": "PersonGroup Person - Get",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Specifying the target person.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns the person's information.\n<br/><br/> JSON fields in response body:\n\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>personId</td><th>String</th><td>personId of the retrieved person.</td></tr>\n<tr><td>persistedFaceIds</td><th>Array</th><td>persistedFaceIds of registered faces in the person. These persistedFaceIds are returned from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\">PersonGroup PersonFace - Add</a>, and will not expire.</td></tr>\n<tr><td>name</td><th>String</th><td>Person's display name.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the person.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
                "persistedFaceIds": [
                  "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                  "fce92aed-d578-4d2e-8114-068f8af4492e",
                  "b64d5e15-8257-4af2-b20a-5a750f8940e7"
                ],
                "name": "Ryan",
                "userData": "User-provided data attached to the person."
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update name or userData of a person.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "563879b61984550f30395242",
        "summary": "PersonGroup Person - Update",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"Person1\",\n    \"userData\": \"user-provided data attached to the person.\"\n}"
            },
            "description": "\nJSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>name</td><th>String</th><td>Target person's display name. Maximum length is 128.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the person. Maximum length is 16KB.</td></tr>\n\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "415": {
            "description": "\nUnsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}/persons/{personId}/persistedFaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a person in a person group by specified personGroupId, personId and persistedFaceId.\n<br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed\nin parallel.\n<br />\n<h4>Http Method</h4>\nDELETE",
        "operationId": "563879b61984550f3039523e",
        "summary": "PersonGroup Person - Delete Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Specifying the person that the target persisted face belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "The persisted face to remove. This persistedFaceId is returned from <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b\">PersonGroup PersonFace - Add</a>.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersistedFaceNotFound</td><td>Face ID is invalid.</td></tr>\n<tr><td>PersistedFaceNotFound</td><td>Face is not found.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve person face information. The persisted person face is specified by its personGroupId, personId and persistedFaceId.\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f30395240",
        "summary": "PersonGroup Person - Get Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "Specifying the target person that the face belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "The persistedFaceId of the target persisted face of the person.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns target persisted face's information (persistedFaceId and userData).\n<br/><br/>\nJSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>persistedFaceId</td><th>String</th><td>The persistedFaceId of the target face, which is persisted and will not expire. Different from faceId created by <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the face.</td></tr>\n\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "persistedFaceId": "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                "userData": "User-provided data attached to the person."
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersistedFaceNotFound</td><td>Face ID is invalid.</td></tr>\n<tr><td>PersistedFaceNotFound</td><td>Face is not found.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\n<tr><td>PersonNotFound</td><td>Person is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a person persisted face's userData field.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "563879b61984550f30395243",
        "summary": "PersonGroup Person - Update Face",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Specifying the person group containing the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of target face, which is persisted and will not expire.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"userData\": \"User-provided data attached to the face.\"\n}"
            },
            "description": "\nJSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>userData (optional)</td><th>String</th><td>Optional. Attach userData to person's persisted face. The size limit is 1KB.</td></tr>\n\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n\n\n<tr><td>PersistedFaceNotFound</td><td>Face ID is invalid.</td></tr>\n<tr><td>PersistedFaceNotFound</td><td>Face is not found.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is invalid.</td></tr>\n<tr><td>PersonNotFound</td><td>Person ID is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "415": {
            "description": "\nUnsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}": {
      "put": {
        "description": "Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel.\n<br /> A person group is a container holding the uploaded person data, including face recognition features.\n<br /> After creation, use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c\">PersonGroup Person - Create</a> to add persons into the group, and then call\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249\">PersonGroup - Train</a> to get this group ready for\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>.\n<br /> No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d\">PersonGroup Person - Delete</a> or\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245\">PersonGroup - Delete</a> is called.\n<br />\n<br/>'recognitionModel' should be specified to associate with this person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing person group will use the recognition model that's already associated with the collection. Existing face feature(s) in a person group can't be updated to features extracted by another version of recognition model.\n<ul>\n    <li>\n        'recognition_01': The default recognition model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\">PersonGroup - Create</a>. All those person groups created before 2019 March are bonded with this recognition model.\n    </li>\n    <li>\n        'recognition_02': Recognition model released in 2019 March.\n    </li>\n    <li>\n        'recognition_03': Recognition model released in 2020 May. 'recognition_03' is recommended since its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.\n    </li>\n</ul>\nPerson group quota:\n<ul>\n    <li>Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons.</li>\n    <li>S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons.</li>\n    <li>to handle larger scale face identification problem, please consider using\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d\">LargePersonGroup</a>.</li>\n</ul>\n<h4>Http Method</h4>\nPUT",
        "operationId": "563879b61984550f30395244",
        "summary": "PersonGroup - Create",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "User-provided personGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the personGroupId is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"group1\",\n    \"userData\": \"user-provided data attached to the person group.\",\n    \"recognitionModel\": \"recognition_03\"\n}"
            },
            "description": "\nJSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>name</td><th>String</th><td>Person group display name. The maximum length is 128.</td></tr>\n<tr><td>userData (optional)</td><th>String</th><td>User-provided data attached to the person group. The size limit is 16KB.</td></tr>\n<tr><td>recognitionModel (optional)</td><th>String</th><td>The 'recognitionModel' associated with this person group. Supported 'recognitionModel' values include \"recognition_01\", \"recognition_02, and \"recognition_03\". The default value is \"recognition_01\". \"recognition_03\" is recommended since its overall accuracy is improved compared with \"recognition_01\" and \"recognition_02\".</td></tr>\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns an empty response body.\n"
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n<tr><td>BadArgument</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters. </td></tr>\n<tr><td>BadArgument</td><td>'recognitionModel' is invalid.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupExists</td><td>Person group already exists.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupExists",
                  "message": "Person group already exists."
                }
              }
            }
          },
          "415": {
            "description": "\nUnsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an existing person group with specified personGroupId. Persisted data in this person group will be deleted.\n<h4>Http Method</h4>\nDELETE",
        "operationId": "563879b61984550f30395245",
        "summary": "PersonGroup - Delete",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "The personGroupId of the person group to be deleted.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241\">PersonGroup Person - List</a>.\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f30395246",
        "summary": "PersonGroup - Get",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of the target person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns the person group's information.\n<br/><br/> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>personGroupId</td><th>String</th><td>Target personGroupId provided in request parameter.</td></tr>\n<tr><td>name</td><th>String</th><td>Person group's display name.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to this person group.</td></tr>\n<tr><td>recognitionModel</td><th>String</th><td>The 'recognitionModel' associated with this person group. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "personGroupId": "sample_group",
                "name": "group1",
                "userData": "User-provided data attached to the person group.",
                "recognitionModel": "recognition_03"
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update an existing person group's name and userData. The properties keep unchanged if they are not in request body.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "563879b61984550f3039524a",
        "summary": "PersonGroup - Update",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of the person group to be updated.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"group1\",\n    \"userData\": \"user-provided data attached to the person group.\"\n}"
            },
            "description": "\nJSON fields in request body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>name</td><th>String</th><td>Person group display name. The maximum length is 128.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to the person group. The size limit is 16KB.</td></tr>\n\n</tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>'name' is too long.</td></tr>\n<tr><td>BadArgument</td><td>'userData' is too long.</td></tr>\n<tr><td>BadArgument</td><td>Bad and unrecognizable JSON body.</td></tr>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>personGroupId is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>The person group is still under training. Try again after training completed.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "415": {
            "description": "\nUnsupported media type error. Only \"application/json\" is valid for this API.\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}/training": {
      "get": {
        "description": "To check person group training status completed or still ongoing. PersonGroup Training is an asynchronous operation triggered\nby\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249\">PersonGroup - Train</a> API.\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f30395247",
        "summary": "PersonGroup - Get Training Status",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "personGroupId of target person group.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person group's training status.\n<br />\n<br /> JSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>status</td>\n            <th>String</th>\n            <td>Training status: notstarted, running, succeeded, failed. If the person group has never been trained before, the\n                status is notstarted. If the training is ongoing, the status is running. Status succeed means this person\n                group is ready for\n                <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>. Status failed is often caused by no person or no persisted face exist in the person\n                group. </td>\n        </tr>\n        <tr>\n            <td>createdDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the last time when the person group is requested to train.\n                E.g. 2018-10-15T11:51:27.6872495Z.\n            </td>\n        </tr>\n        <tr>\n            <td>lastActionDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the last time the person group's training status was modifed.\n                E.g. 2018-10-15T11:51:27.8705696Z.</td>\n        </tr>\n        <tr>\n            <td>message</td>\n            <th>String</th>\n            <td>Show failure message when training failed (omitted when training succeed).</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "status": "succeeded",
                "createdDateTime": "2018-10-15T11:51:27.6872495Z",
                "lastActionDateTime": "2018-10-15T11:51:27.8705696Z",
                "message": null
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n<tr><td>PersonGroupNotTrained</td><td>Person group has not been trained. This error appears on getting training status of a group which never been trained.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups": {
      "get": {
        "description": "List person groups’s personGroupId, name, userData and recognitionModel.\n<ul>\n    <li>Person groups are stored in alphabetical order of personGroupId.</li>\n    <li>\"start\" parameter (string, optional) is a user-provided personGroupId value that returned entries have larger ids by\n        string comparison. \"start\" set to empty to indicate return from the first item.</li>\n    <li>\"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned\n        in one call. To fetch more, you can specify \"start\" with the last retuned entry’s Id of the current call.</li>\n</ul>\nFor example, total 5 person groups: \"group1\", ..., \"group5\".\n<br /> \"start=&top=\" will return all 5 groups.\n<br /> \"start=&top=2\" will return \"group1\", \"group2\".\n<br /> \"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\".\n<h4>Http Method</h4>\nGET",
        "operationId": "563879b61984550f30395248",
        "summary": "PersonGroup - List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List person groups from the least personGroupId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of person groups to list, ranging in [1, 1000]. Default is 1000.",
            "type": "integer",
            "default": "1000",
            "enum": [
              "1000"
            ]
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "\nA successful call returns an array of person groups and their information (personGroupId, name and userData).\n<br /><br /> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>personGroupId</td><th>String</th><td>personGroupId of the existing person groups, created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\">PersonGroup - Create</a>.</td></tr>\n<tr><td>name</td><th>String</th><td>Person group's display name.</td></tr>\n<tr><td>userData</td><th>String</th><td>User-provided data attached to this person group.</td></tr>\n<tr><td>recognitionModel</td><th>String</th><td>The 'recognitionModel' associated with this person group. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": "[\n    {\n        \"personGroupId\": \"sample_group\",\n        \"name\": \"group1\",\n        \"userData\": \"User-provided data attached to the person group.\",\n        \"recognitionModel\": \"recognition_01\"\n    },\n    {\n        \"personGroupId\": \"sample_group2\",\n        \"name\": \"group2\",\n        \"userData\": \"User-provided data attached to the person group.\",\n        \"recognitionModel\": \"recognition_03\"\n    }\n]"
            }
          },
          "400": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>BadArgument</td><td>Parameter top is invalid. Valid range is [1, 1000].</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 400,
                  "message": "Parameter top is invalid."
                }
              }
            }
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/persongroups/{personGroupId}/train": {
      "post": {
        "description": "Submit a person group training task. Training is a crucial step that only a trained person group can be used by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>.\n<br />\n<br /> The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a person\ngroup. It could be several seconds to minutes. To check training status, please use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395247\">PersonGroup - Get Training Status</a>.\n<h4>Http Method</h4>\nPOST",
        "operationId": "563879b61984550f30395249",
        "summary": "PersonGroup - Train",
        "parameters": [
          {
            "name": "personGroupId",
            "in": "path",
            "description": "Target person group to be trained.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "\nA successful call returns an empty JSON body.\n"
          },
          "401": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupNotFound</td><td>Person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>PersonGroupNotFound</td><td>Person group is not found.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupNotFound",
                  "message": "Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "\nError code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>PersonGroupTrainingNotFinished</td><td>Person group is under training.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces": {
      "post": {
        "description": "Add a face to a specified large face list, up to 1,000,000 faces.\n<br /> To deal with an image containing multiple faces, input face can be specified as an image with a targetFace rectangle. It returns\na persistedFaceId representing the added face. No image will be stored. Only the extracted face feature(s) will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4\">LargeFaceList Face - Delete</a> or\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd\">LargeFaceList - Delete</a> is called.\n<br /> Note persistedFaceId is different from faceId generated by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.\n<ul>\n    <li>Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</li>\n    <li>JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.</li>\n    <li>\"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided\n        \"targetFace\" rectangle is not returned from\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>, there’s no guarantee to detect and add the face successfully.</li>\n    <li>Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.</li>\n    <li>Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.</li>\n    <li>The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.</li>\n    <li>Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to <a href=\"https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model\">How to specify a detection model</a></li>\n    <ul>\n        <li>\n            'detection_01': The default detection model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3\">LargeFaceList - Add Face</a>. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected.\n        </li>\n        <li>\n            'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces.\n    </ul>\n</ul>\nQuota:\n<ul>\n    <li>Free-tier subscription quota: 1,000 faces per large face list.</li>\n    <li>S0-tier subscription quota: 1,000,000 faces per large face list.</li>\n</ul>\n<h4>Http Method</h4>\nPOST",
        "operationId": "5a158c10d2de3616c086f2d3",
        "summary": "LargeFaceList - Add Face",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-specified data about the target face to add for any purpose. The maximum length is 1KB.",
            "type": "string"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a large face list, in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
            "type": "string"
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "\"The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include \"detection_01\" or \"detection_02\". The default value is \"detection_01\".",
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "[binary data]"
            },
            "description": "<br/>\n<br/> JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>url</td>\n            <th>String</th>\n            <td>Face image URL. Valid image size is from 1KB to 6MB. Only one face is allowed per image.</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new persistedFaceId.\n<br/><br/> JSON fields in response body:\n<table class=\"element table\">\n<thead>\n<tr><th>Fields</th><th>Type</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>persistedFaceId</td><th>String</th><td>persistedFaceId of the added face, which is persisted and will not expire. Different from faceId which is created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a> and will expire in 24 hours after the detection call.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "persistedFaceId": "43897a75-8d6f-42cf-885e-74832febb055"
              }
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>JSON parsing error.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Argument targetFace out of range.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Invalid argument targetFace.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'detectionModel' is invalid.</td>\n        </tr>\n        <tr>\n            <td>InvalidURL</td>\n            <td>Invalid image URL.</td>\n        </tr>\n        <tr>\n            <td>InvalidURL</td>\n            <td>Invalid image URL or error downloading from target server. Remote server error returned: \"An error occurred while sending the request.\"</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>There is more than 1 face in the image.</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>No face detected in the image.</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>Decoding error, image format unsupported.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageSize</td>\n            <td>Image size is too small.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageSize</td>\n            <td>Image size is too big.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "JSON parsing error."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Persisted face number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListNotFound",
                  "message": "Large face list is not found."
                }
              }
            }
          },
          "408": {
            "description": "Operation exceeds maximum execution time.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Content-Type is not in the allowed types:\n<br/>\n<ol>\n    <li>For an image URL, Content-Type should be application/json</li>\n    <li>For a local image, Content-Type should be application/octet-stream</li>\n</ol>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "List faces' persistedFaceId and userData in a specified large face list.\n<ul>\n    <li>Faces are stored in alphabetical order of persistedFaceId created in\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3\">LargeFaceList Face - Add</a>.</li>\n    <li>\"start\" parameter (string, optional) is a persistedFaceId value that returned entries have larger ids by string comparison.\n        \"start\" set to empty to indicate return from the first item.</li>\n    <li>\"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned\n        in one call. To fetch more, you can specify \"start\" with the last returned entry’s persistedFaceId of the current call.</li>\n</ul>\nFor example, total 5 persons with their face: \"face1\", ..., \"face5\".\n<br /> \"start=&top=\" will return all 5 persons.\n<br /> \"start=&top=2\" will return \"face1\", \"face2\".\n<br /> \"start=face2&top=3\" will return \"face3\", \"face4\", \"face5\".\n<h4>Http Method</h4>\nGET",
        "operationId": "5a158db4d2de3616c086f2d6",
        "summary": "LargeFaceList - List Face",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List large face list faces from the least persistedFaceId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of large face list faces to list, ranging in [1, 1000]. Default is 1000.",
            "type": "string",
            "default": "1000",
            "enum": [
              "1000"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of persisted faces and their information (persistedFaceId and userData).\n<br />\n<br />\nJSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>persistedFaceId</td>\n            <th>String</th>\n            <td>persistedFaceId of the existing persisted face, created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3\">LargeFaceList Face - Add</a>.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to this persisted face.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": "[\n    {\n        \"persistedFaceId\": \"8a887ac2-53fd-4f55-9024-1ec77eecd08e\",\n        \"userData\": \"User-provided data attached to the large face list face.\"\n    },\n    {\n        \"persistedFaceId\": \"f92f6f1b-3258-4444-8fa2-c2df505cc7ac\",\n        \"userData\": \"User-provided data attached to the large face list face.\"\n    }\n]"
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>'start' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'top' is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'top' is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Large Face List number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListNotFound",
                  "message": "Large face list is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}": {
      "put": {
        "description": "Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.\n<br /> Large face list is a list of faces, up to 1,000,000 faces, and used by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\n<br /> After creation, user should use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3\">LargeFaceList Face - Add</a> to import the faces and\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1\">LargeFaceList - Train</a> to make it ready for\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>. No image will be stored. Only the extracted face feature(s) will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd\">LargeFaceList - Delete</a> is called.\n<br /> Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification.\nBut if the actual use is to identify person, please use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244\">PersonGroup</a> /\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d\">LargePersonGroup</a> and\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>.\n<br />\n<br/>'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face feature(s) in a large face list can't be updated to features extracted by another version of recognition model.\n<ul>\n    <li>\n        'recognition_01': The default recognition model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc\">LargeFaceList- Create</a>. All those large face lists created before 2019 March are bonded with this recognition model.\n    </li>\n    <li>\n        'recognition_02': Recognition model released in 2019 March.\n    </li>\n    <li>\n        'recognition_03': Recognition model released in 2020 May. 'recognition_03' is recommended since its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.\n    </li>\n</ul>\nLarge face list quota:\n<ul>\n    <li>Free-tier subscription quota: 64 large face lists.</li>\n    <li>S0-tier subscription quota: 1,000,000 large face lists.</li>\n</ul>\n<h4>Http Method</h4>\nPUT",
        "operationId": "5a157b68d2de3616c086f2cc",
        "summary": "LargeFaceList - Create",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"large-face-list-name\",\n    \"userData\": \"User-provided data attached to the large face list.\",\n    \"recognitionModel\": \"recognition_03\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Name of the created large face list, maximum length is 128.</td>\n        </tr>\n        <tr>\n            <td>userData (optional)</td>\n            <th>String</th>\n            <td>Optional user defined data for the large face list. Length should not exceed 16KB.</td>\n        </tr>\n        <tr>\n            <td>recognitionModel (optional)</td>\n            <th>String</th>\n            <td>The 'recognitionModel' associated with this large face list. Supported 'recognitionModel' values include \"recognition_01\", \"recognition_02\" and \"recognition_03\". The default value is \"recognition_01\". \"recognition_03\" is recommended since its overall accuracy is improved compared with \"recognition_01\" and \"recognition_02\".\n            </td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is empty.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>JSON parsing error.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'recognitionModel' is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "Large face list number reached maximum limit.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Large Face List number reached limit."
                }
              }
            }
          },
          "409": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListExists</td>\n            <td>Large face list already exists.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListExists",
                  "message": "Large face list already exists."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specified large face list.\n<h4>Http Method</h4>\nDELETE",
        "operationId": "5a1580d5d2de3616c086f2cd",
        "summary": "LargeFaceList - Delete",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListNotFound",
                  "message": "Large face list is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.\n<h4>Http Method</h4>\nGET",
        "operationId": "5a15827cd2de3616c086f2ce",
        "summary": "LargeFaceList - Get",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "largeFaceListId of the target large face list.",
            "required": true,
            "type": "string"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large face list's information.\n<br/>\n<br/>\nJSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>largeFaceListId</td>\n            <th>String</th>\n            <td>largeFaceListId of the target large face list.</td>\n        </tr>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Large face list's display name.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to this large face list.</td>\n        </tr>\n        <tr>\n            <td>recognitionModel</td>\n            <th>String</th>\n            <td>The 'recognitionModel' associated with this large face list. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "largeFaceListId": "f92f6f1b-3258-4444-8fa2-c2df505cc7ac",
                "name": "large-face-list-name",
                "userData": "User-provided data attached to the large face list.",
                "recognitionModel": "recognition_03"
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListNotFound",
                  "message": "Large face list is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update information of a large face list, including name and userData.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "5a158499d2de3616c086f2d2",
        "summary": "LargeFaceList - Update",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"large-face-list-name\",\n    \"userData\": \"User-provided data attached to the large face list.\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Name of the large face list, maximum length is 128</td>\n        </tr>\n        <tr>\n            <td>userData (optional)</td>\n            <th>String</th>\n            <td>Optional user defined data for the large face list. Length should not exceed 16KB</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Both 'name' and 'userData' are empty.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Request body is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListNotFound",
                  "message": "Large face list is not found."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a large face list by specified largeFaceListId and persistedFaceId.\n<br />\nAdding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.\n<h4>Http Method</h4> DELETE\n",
        "operationId": "5a158c8ad2de3616c086f2d4",
        "summary": "LargeFaceList - Delete Face",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "largeFaceListId of an existing large face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Large Face List number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Large Face List Face is not found.</td>\n        </tr>\n    </tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceNotFound",
                  "message": "Persisted face ID is invalid."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve persisted face in large face list by largeFaceListId and persistedFaceId.\n<h4>Http Method</h4>\nGET",
        "operationId": "5a158cf2d2de3616c086f2d5",
        "summary": "LargeFaceList - Get Face",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "largeFaceListId of an existing large face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).",
            "examples": {
              "application/json": {
                "persistedFaceId": "12167f31-c0f6-4d3b-806c-116b4b4b4e4c",
                "userData": "User-provided data attached to the large face list face."
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Large Face List Face is not found.</td>\n        </tr>\n    </tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceNotFound",
                  "message": "Persisted face ID is invalid."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a specified face's userData field in a large face list by its persistedFaceId.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "5a158ec9d2de3616c086f2d7",
        "summary": "LargeFaceList - Update Face",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "largeFaceListId of an existing large face list. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of an existing face. Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"userData\": \"User-provided data attached to the large face list face.\"\n}"
            },
            "description": "User-specified data about the target face to add for any purpose. The maximum length is 1KB."
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Request body is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Large Face List Face is not found.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceNotFound",
                  "message": "Persisted face ID is invalid."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/training": {
      "get": {
        "description": "To check the large face list training status completed or still ongoing. LargeFaceList Training is an asynchronous operation\ntriggered by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1\">LargeFaceList - Train</a> API.\n<br /> Training time depends on the number of face entries in a large face list. It could be in seconds, or up to half an hour\nfor 1,000,000 faces.\n<h4>Http Method</h4>\nGET",
        "operationId": "5a1582f8d2de3616c086f2cf",
        "summary": "LargeFaceList - Get Training Status",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "largeFaceListId of the target large face list.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large face list's training status.\n<br />\n<br /> JSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>status</td>\n            <th>String</th>\n            <td>Training status: notstarted, running, succeeded, failed. If the large face list has never been trained before,\n                the status is notstarted. If the training is ongoing, the status is running. Status succeed means this large\n                face list is ready for\n                <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>. Status failed is often caused by no persisted face exist in the large face list.\n            </td>\n        </tr>\n        <tr>\n            <td>createdDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the last time when the large face list is requested to train.\n                E.g. 2018-10-15T11:51:27.6872495Z.\n            </td>\n        </tr>\n        <tr>\n            <td>lastActionDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the last time the large face list's training status was modifed.\n                E.g. 2018-10-15T11:51:27.8705696Z.</td>\n        </tr>\n        <tr>\n            <td>lastSuccessfulTrainingDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the large face list's last successful training time. E.g.\n                2018-10-15T11:51:27.8705696Z.\n            </td>\n        </tr>\n        <tr>\n            <td>message</td>\n            <th>String</th>\n            <td>Show failure message when training failed (omitted when training succeed).</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "status": "succeeded",
                "createdDateTime": "2018-10-15T11:51:27.6872495Z",
                "lastActionDateTime": "2018-10-15T11:51:27.8705696Z",
                "lastSuccessfulTrainingDateTime": "2018-10-15T11:51:27.8705696Z",
                "message": null
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotTrained</td>\n            <td>Large face list not trained. This error appears on getting training status of a large face list which never been trained.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListNotFound",
                  "message": "Large face list is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largefacelists": {
      "get": {
        "description": "List large face lists’ information of largeFaceListId, name, userData and recognitionModel.\n<br /> To get face information inside largeFaceList use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5\">LargeFaceList Face - Get</a>.\n<ul>\n    <li>Large face lists are stored in alphabetical order of largeFaceListId.</li>\n    <li>\"start\" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids\n        by string comparison. \"start\" set to empty to indicate return from the first item.</li>\n    <li>\"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned\n        in one call. To fetch more, you can specify \"start\" with the last retuned entry’s Id of the current call.</li>\n</ul>\nFor example, total 5 large person lists: \"list1\", ..., \"list5\".\n<br /> \"start=&top=\" will return all 5 lists.\n<br /> \"start=&top=2\" will return \"list1\", \"list2\".\n<br /> \"start=list2&top=3\" will return \"list3\", \"list4\", \"list5\".\n<h4>Http Method</h4>\nGET",
        "operationId": "5a158387d2de3616c086f2d0",
        "summary": "LargeFaceList - List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List large face lists from the least largeFaceListId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of large face lists to list, ranging in [1, 1000]. Default is 1000.",
            "type": "string",
            "default": "1000",
            "enum": [
              "1000"
            ]
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of large face lists and their information (largeFaceListId, name and userData).\n<br />\n<br />\nJSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>largeFaceListId</td>\n            <th>String</th>\n            <td>largeFaceListId of the existing large face lists, created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc\">LargeFaceList - Create</a>.</td>\n        </tr>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Large face list's display name.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to this large face list.</td>\n        </tr>\n        <tr>\n            <td>recognitionModel</td>\n            <th>String</th>\n            <td>The 'recognitionModel' associated with this large face list. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": "[\n    {\n        \"largeFaceListId\": \"f92f6f1b-3258-4444-8fa2-c2df505cc7ac\",\n        \"name\": \"large-face-list-name1\",\n        \"userData\": \"User-provided data attached to the large face list.\",\n        \"recognitionModel\": \"recognition_01\"\n    },\n    {\n        \"largeFaceListId\": \"c76f7f13-0ed3-4d00-8a3e-2ad3d78f6c37\",\n        \"name\": \"large-face-list-name2\",\n        \"userData\": \"User-provided data attached to the large face list.\",\n        \"recognitionModel\": \"recognition_03\"\n    }\n]"
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>'start' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'top' is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'top' is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Large Face List number reached limit."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largefacelists/{largeFaceListId}/train": {
      "post": {
        "description": "Submit a large face list training task. Training is a crucial step that only a trained large face list can be used by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237\">Face - Find Similar</a>.\n<br />\n<br /> The training task is an asynchronous task. Training time depends on the number of face entries in a large face list. It could\nbe in seconds, or up to half an hour for 1,000,000 faces. To check training completion, please use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a1582f8d2de3616c086f2cf\">LargeFaceList - Get Training Status</a>.\n<h4>Http Method</h4>\nPOST",
        "operationId": "5a158422d2de3616c086f2d1",
        "summary": "LargeFaceList - Train",
        "parameters": [
          {
            "name": "largeFaceListId",
            "in": "path",
            "description": "largeFaceListId of the target large face list to be trained.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list is not found.</td>\n        </tr>\n        <tr>\n            <td>LargeFaceListNotFound</td>\n            <td>Large face list ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListNotFound",
                  "message": "Large face list is not found."
                }
              }
            }
          },
          "409": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargeFaceListTrainingNotFinished</td>\n            <td>Large Face List is under training.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargeFaceListTrainingNotFinished",
                  "message": "Large face list is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}": {
      "put": {
        "description": "Create a new large person group with user-specified largePersonGroupId, name, an optional userData and recognitionModel.\n<br /> A large person group is a container holding the uploaded person data, including the face recognition features. It can hold up to 1,000,000 entities.\n<br /> After creation, use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40\">LargePersonGroup Person - Create</a> to add person into the group, and call\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4\">LargePersonGroup - Train</a> to get this group ready for\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>.\n<br /> No image will be stored. Only the person's extracted face feature(s) and userData will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2\">LargePersonGroup Person - Delete</a> or\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f\">LargePersonGroup - Delete</a> is called.\n<br />\n<br/>'recognitionModel' should be specified to associate with this large person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large person group will use the recognition model that's already associated with the collection. Existing face feature(s) in a large person group can't be updated to features extracted by another version of recognition model.\n<ul>\n    <li>\n        'recognition_01': The default recognition model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d\">LargePersonGroup - Create</a>. All those large person groups created before 2019 March are bonded with this recognition model.\n    </li>\n    <li>\n        'recognition_02': Recognition model released in 2019 March.\n    </li>\n    <li>\n        'recognition_03': Recognition model released in 2020 May. 'recognition_03' is recommended since its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.\n    </li>\n</ul>\nLarge person group quota:\n<ul>\n    <li>Free-tier subscription quota: 1,000 large person groups.</li>\n    <li>S0-tier subscription quota: 1,000,000 large person groups.</li>\n</ul>\n<h4>Http Method</h4>\nPUT",
        "operationId": "599acdee6ac60f11b48b5a9d",
        "summary": "LargePersonGroup - Create",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "User-provided largePersonGroupId as a string. The valid characters include numbers, English letters in lower case, '-' and '_'. The maximum length of the largePersonGroupId is 64.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"large-person-group-name\",\n    \"userData\": \"User-provided data attached to the large person group.\",\n    \"recognitionModel\": \"recognition_03\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Name of the created large person group, maximum length is 128.</td>\n        </tr>\n        <tr>\n            <td>userData (optional)</td>\n            <th>String</th>\n            <td>Optional user defined data for the large person group. Length should not exceed 16KB.</td>\n        </tr>\n        <tr>\n            <td>recognitionModel (optional)</td>\n            <th>String</th>\n            <td>The 'recognitionModel' associated with this large person group. Supported 'recognitionModel' values include \"recognition_01\", \"recognition_02\" and \"recognition_03\". The default value is \"recognition_01\". \"recognition_03\" is recommended since its overall accuracy is improved compared with \"recognition_01\" and \"recognition_02\".</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is empty.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>JSON parsing error.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'recognitionModel' is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "Large person group number reached maximum limit.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Large person group number reached subscription level limit."
                }
              }
            }
          },
          "409": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargePersonGroupExists</td>\n            <td>Large person group already exists.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupExists",
                  "message": "Large person group already exists."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an existing large person group with specified personGroupId. Persisted data in this large person group will be deleted.\n<h4>Http Method</h4>\nDELETE",
        "operationId": "599adc216ac60f11b48b5a9f",
        "summary": "LargePersonGroup - Delete",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the large person group to be deleted.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve the information of a large person group, including its name, userData and recognitionModel. This API returns large person group information\nonly, use\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1\">LargePersonGroup Person - List</a> instead to retrieve person information under the large person group.\n<h4>Http Method</h4> GET",
        "operationId": "599acebb6ac60f11b48b5a9e",
        "summary": "LargePersonGroup - Get",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large person group's information.\n<br/>\n<br/>\nJSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>largePersonGroupId</td>\n            <th>String</th>\n            <td>largePersonGroupId of the target large person group.</td>\n        </tr>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Large person group's display name.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to this large person group.</td>\n        </tr>\n        <tr>\n            <td>recognitionModel</td>\n            <th>String</th>\n            <td>The 'recognitionModel' associated with this large person group. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "largePersonGroupId": "d408cb4e-2f5f-4b4d-b99e-f0b72870e5b5",
                "name": "large-person-group-name",
                "userData": "User-provided data attached to the large person group.",
                "recognitionModel": "recognition_03"
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update an existing large person group's name and userData. The properties keep unchanged if they are not in request body.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "599acfc83a7b9412a4d53f3f",
        "summary": "LargePersonGroup - Update",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"large-person-group-name\",\n    \"userData\": \"User-provided data attached to the large person group.\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Name of the created large person group, maximum length is 128.</td>\n        </tr>\n        <tr>\n            <td>userData (optional)</td>\n            <th>String</th>\n            <td>Optional user defined data for the large person group. Length should not exceed 16KB.</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Both 'name' and 'userData' are empty.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Request body is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/training": {
      "get": {
        "description": "To check large person group training status completed or still ongoing. LargePersonGroup Training is an asynchronous operation\ntriggered by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4\">LargePersonGroup - Train</a> API.\n<br /> Training time depends on the number of person entries, and their faces in a large person group. It could be in seconds,\nor up to half an hour for 1,000,000 persons.\n<h4>Http Method</h4>\nGET",
        "operationId": "599ae32c6ac60f11b48b5aa5",
        "summary": "LargePersonGroup - Get Training Status",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "LargePersonGroupId of target person group.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the large person group's training status.\n<br />\n<br /> JSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>status</td>\n            <th>String</th>\n            <td>Training status: notstarted, running, succeeded, failed. If the large person group has never been trained before,\n                the status is notstarted. If the training is ongoing, the status is running. Status succeed means this large\n                person group is ready for\n                <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>. Status failed is often caused by no person or no persisted face exist in the large person\n                group. </td>\n        </tr>\n        <tr>\n            <td>createdDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the last time when the large person group is requested to\n                train. E.g. 2018-10-15T11:51:27.6872495Z.</td>\n        </tr>\n        <tr>\n            <td>lastActionDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the last time the large person group's training status was\n                modifed. E.g. 2018-10-15T11:51:27.8705696Z.</td>\n        </tr>\n        <tr>\n            <td>lastSuccessfulTrainingDateTime</td>\n            <th>String</th>\n            <td>A combined UTC date and time string that describes the large person group's last successful training time. E.g.\n                2018-10-15T11:51:27.8705696Z.\n            </td>\n        </tr>\n        <tr>\n            <td>message</td>\n            <th>String</th>\n            <td>Show failure message when training failed (omitted when training succeed).</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "status": "succeeded",
                "createdDateTime": "2018-10-15T11:51:27.6872495Z",
                "lastActionDateTime": "2018-10-15T11:51:27.8705696Z",
                "lastSuccessfulTrainingDateTime": "2018-10-15T11:51:27.8705696Z",
                "message": null
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>LargePersonGroupNotFound</td><td> Large person group ID is invalid.</td></tr>\n<tr><td>LargePersonGroupNotFound</td><td>Large person group is not found.</td></tr>\n<tr><td>LargePersonGroupNotTrained</td><td>Large person group has not been trained. This error appears on getting training status of a group which never been trained.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "",
            "examples": {
              "application/json": "{\n    \"error\": {\n        \"code\": ConcurrentOperationConflict,\n        \"message\": \"There is a conflict operation on requested resource, please try later.\"\n    }\n}"
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups": {
      "get": {
        "description": "List all existing large person groups’s largePersonGroupId, name, userData and recognitionModel.\n<ul>\n    <li>Large person groups are stored in alphabetical order of largePersonGroupId.</li>\n    <li>\"start\" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries have larger ids\n        by string comparison. \"start\" set to empty to indicate return from the first item.</li>\n    <li>\"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned\n        in one call. To fetch more, you can specify \"start\" with the last retuned entry’s Id of the current call.</li>\n</ul>\nFor example, total 5 large person groups: \"group1\", ..., \"group5\".\n<br /> \"start=&top=\" will return all 5 groups.\n<br /> \"start=&top=2\" will return \"group1\", \"group2\".\n<br /> \"start=group2&top=3\" will return \"group3\", \"group4\", \"group5\".\n<h4>Http Method</h4>\nGET",
        "operationId": "599acf823a7b9412a4d53f3e",
        "summary": "LargePersonGroup - List",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "List large person groups from the least largePersonGroupId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of large person groups to list, ranging in [1, 1000]. Default is 1000.",
            "type": "integer",
            "default": "1000",
            "enum": [
              "1000"
            ]
          },
          {
            "name": "returnRecognitionModel",
            "in": "query",
            "description": "Return 'recognitionModel' or not. The default value is false.",
            "type": "boolean",
            "default": "false",
            "enum": [
              "false",
              "true"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of large person groups and their information (largePersonGroupId, name and userData).\n<br />\n<br />\nJSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>largePersonGroupId</td>\n            <th>String</th>\n            <td>largePersonGroupId of the existing large person groups, created in <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc\">LargeFaceList - Create</a>.</td>\n        </tr>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Large person group's display name.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to this large person group.</td>\n        </tr>\n        <tr>\n            <td>recognitionModel</td>\n            <th>String</th>\n            <td>The 'recognitionModel' associated with this large person group. This is only returned when 'returnRecognitionModel' is explicitly set as true.</td>\n        </tr>        \n    </tbody>\n</table>",
            "examples": {
              "application/json": "[\n    {\n        \"largePersonGroupId\": \"f92f6f1b-3258-4444-8fa2-c2df505cc7ac\",\n        \"name\": \"large-person-group-name1\",\n        \"userData\": \"User-provided data attached to the large person group.\",\n        \"recognitionModel\": \"recognition_01\"\n    },\n    {\n        \"largePersonGroupId\": \"c76f7f13-0ed3-4d00-8a3e-2ad3d78f6c37\",\n        \"name\": \"large-person-group-name2\",\n        \"userData\": \"User-provided data attached to the large person group.\",\n        \"recognitionModel\": \"recognition_03\"\n    }\n]"
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>'start' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'top' is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'top' is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Large Face List number reached limit."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/train": {
      "post": {
        "description": "Submit a large person group training task. Training is a crucial step that only a trained large person group can be used\nby\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239\">Face - Identify</a>.\n<br />\n<br /> The training task is an asynchronous task. Training time depends on the number of person entries, and their faces in a large\nperson group. It could be in several seconds, or up to half a hour for 1,000,000 persons. To check training completion, please\nuse\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599ae32c6ac60f11b48b5aa5\">LargePersonGroup - Get Training Status</a>.\n<h4>Http Method</h4>\nPOST",
        "operationId": "599ae2d16ac60f11b48b5aa4",
        "summary": "LargePersonGroup - Train",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "Target large person group to be trained.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "A successful call returns an empty JSON body."
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unspecified</td><td>Invalid subscription Key or user/plan is blocked.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>LargePersonGroupNotFound</td><td>Large person group ID is invalid. Valid format should be a string composed by numbers, English letters in lower case, '-', '_', and no longer than 64 characters.</td></tr>\n<tr><td>LargePersonGroupNotFound</td><td>Large person group is not found.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large Person group is not found."
                }
              }
            }
          },
          "409": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n<thead>\n<tr><th>Error Code</th><th>Error Message Description</th></tr>\n</thead>\n<tbody>\n<tr><td>LargePersonGroupTrainingNotFinished</td><td>Large person group is under training.</td></tr>\n<tr><td>ConcurrentOperationConflict</td><td>Concurrent operation conflict on requested resource.</td></tr>\n</tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonGroupTrainingNotFinished",
                  "message": "Person group is under training."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces": {
      "post": {
        "description": "Add a face to a person into a large person group for face identification or verification. To deal with an image containing\nmultiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing\nthe added face. No image will be stored. Only the extracted face feature(s) will be stored on server until\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599ae2966ac60f11b48b5aa3\">LargePersonGroup PersonFace - Delete</a>,\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2\">LargePersonGroup Person - Delete</a> or\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f\">LargePersonGroup - Delete</a> is called.\n<br /> Note persistedFaceId is different from faceId generated by\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>.\n<ul>\n    <li>Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and\n        face size is 200x200 pixels (100 pixels between eyes) or bigger.</li>\n    <li>Each person entry can hold up to 248 faces.</li>\n    <li>JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.</li>\n    <li>\"targetFace\" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided\n        \"targetFace\" rectangle is not returned from\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236\">Face - Detect</a>, there’s no guarantee to detect and add the face successfully.</li>\n    <li>Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.</li>\n    <li>Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons\n        are processed in parallel.</li>\n    <li>The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.</li>\n    <li>Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to <a href=\"https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model\">How to specify a detection model</a></li>\n    <ul>\n        <li>\n            'detection_01': The default detection model for <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adf2a3a7b9412a4d53f42\">LargePersonGroup Person - Add Face</a>. Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected.\n        </li>\n        <li>\n            'detection_02': Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces.\n        </li>\n    </ul>\n</ul>\n<h4>Http Method</h4>\nPOST",
        "operationId": "599adf2a3a7b9412a4d53f42",
        "summary": "LargePersonGroup Person - Add Face",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "userData",
            "in": "query",
            "description": "User-specified data about the target face to add for any purpose. The maximum length is 1KB.",
            "type": "string"
          },
          {
            "name": "targetFace",
            "in": "query",
            "description": "A face rectangle to specify the target face to be added to a person, in the format of \"targetFace=left,top,width,height\". E.g. \"targetFace=10,10,100,100\". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.",
            "type": "string"
          },
          {
            "name": "detectionModel",
            "in": "query",
            "description": "The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include \"detection_01\" or \"detection_02\". The default value is \"detection_01\".",
            "type": "string",
            "default": "detection_01",
            "enum": [
              "detection_01",
              "detection_02"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "[binary data]"
            },
            "description": "<br/>\n<br/> JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>url</td>\n            <th>String</th>\n            <td>Face image URL. Valid image size is from 1KB to 6MB. Only one face is allowed per image.</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": {
                "persistedFaceId": "43897a75-8d6f-42cf-885e-74832febb055"
              }
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>JSON parsing error.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Argument targetFace out of range.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Invalid argument targetFace.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'detectionModel' is invalid.</td>\n        </tr>\n        <tr>\n            <td>InvalidURL</td>\n            <td>Invalid image URL.</td>\n        </tr>\n        <tr>\n            <td>InvalidURL</td>\n            <td>Invalid image URL or error downloading from target server.</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>There is more than 1 face in the image.</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>No face detected in the image.</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>Decoding error, image format unsupported.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageSize</td>\n            <td>Image size is too small.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageSize</td>\n            <td>Image size is too big.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "JSON parsing error."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Persisted face number reached limit."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person is not found.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "408": {
            "description": "Operation exceeds maximum execution time.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "OperationTimeOut",
                  "message": "Request Timeout."
                }
              }
            }
          },
          "409": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>ConcurrentOperationConflict</td>\n            <td>Concurrent operation conflict on requested resource.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "ConcurrentOperationConflict",
                  "message": "Concurrent operation conflict on requested resource."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Content-Type is not in the allowed types:\n<br/>\n<ol>\n    <li>For an image URL, Content-Type should be application/json</li>\n    <li>For a local image, Content-Type should be application/octet-stream</li>\n</ol>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons": {
      "post": {
        "description": "Create a new person in a specified large person group. To add face to this person, please call\n<a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adf2a3a7b9412a4d53f42\">LargePersonGroup PersonFace - Add</a>.\n<br/>\n<ul>\n    <li>Free-tier subscription quota:\n        <ul>\n            <li>1,000 persons in all large person groups.</li>\n        </ul>\n    </li>\n    <li>S0-tier subscription quota:\n        <ul>\n            <li>1,000,000 persons per large person group.</li>\n            <li>1,000,000 large person groups.</li>\n            <li>1,000,000,000 persons in all large person groups.</li>\n        </ul>\n    </li>\n</ul>\n<h4>Http Method</h4>\nPOST",
        "operationId": "599adcba3a7b9412a4d53f40",
        "summary": "LargePersonGroup Person - Create",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"person-name\",\n    \"userData\": \"User-provided data attached to the person.\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Name of the created person, maximum length is 128.</td>\n        </tr>\n        <tr>\n            <td>userData (optional)</td>\n            <th>String</th>\n            <td>Optional user defined data for the person. Length should not exceed 16KB.</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns a new personId created.\n<br/>\n<br/> JSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>personId</td>\n            <th>String</th>\n            <td>personID of the new created person.</td>\n        </tr>\n    </tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "personId": "25985303-c537-4467-b41d-bdb45cd95ca1"
              }
            }
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is empty.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>JSON parsing error.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "Person number reached maximum limit.\n<br />\nError code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>QuotaExceeded</td>\n            <td>Person number reached large person group level limit.</td>\n        </tr>\n        <tr>\n            <td>QuotaExceeded</td>\n            <td>Person number reached subscription level limit.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Person number reached subscription level limit."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "List all persons’ information in the specified large person group, including personId, name, userData and persistedFaceIds\nof registered person faces.\n<ul>\n    <li>Persons are stored in alphabetical order of personId created in\n        <a href=\"/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40\">LargePersonGroup Person - Create</a>.</li>\n    <li>\"start\" parameter (string, optional) is a personId value that returned entries have larger ids by string comparison.\n        \"start\" set to empty to indicate return from the first item.</li>\n    <li>\"top\" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned\n        in one call. To fetch more, you can specify \"start\" with the last returned entry’s personId of the current call.</li>\n</ul>\nFor example, total 5 persons with their personId: \"personId1\", ..., \"personId5\".\n<br /> \"start=&top=\" will return all 5 persons.\n<br /> \"start=&top=2\" will return \"personId1\", \"personId2\".\n<br /> \"start=personId2&top=3\" will return \"personId3\", \"personId4\", \"personId5\".\n<h4>Http Method</h4>\nGET",
        "operationId": "599adda06ac60f11b48b5aa1",
        "summary": "LargePersonGroup Person - List",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "List persons from the least personId greater than the \"start\". It contains no more than 64 characters. Default is empty.",
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The number of persons to list, ranging in [1, 1000]. Default is 1000.",
            "type": "integer",
            "default": "1000",
            "enum": [
              "1000"
            ]
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an array of person information that belong to the large person group.\n<br/>\n<br/> JSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>personId</td>\n            <th>String</th>\n            <td>personId of the person in the large person group.</td>\n        </tr>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Person's display name.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to the person.</td>\n        </tr>\n        <tr>\n            <td>persistedFaceIds</td>\n            <th>Array</th>\n            <td>persistedFaceId array of registered faces of the person.</td>\n        </tr>\n    </tbody>\n</table>\n",
            "examples": {
              "application/json": "[\n    {\n        \"personId\": \"25985303-c537-4467-b41d-bdb45cd95ca1\",\n        \"name\": \"person-name1\",\n        \"userData\": \"User-provided data attached to the person.\",\n        \"persistedFaceIds\": [\n          \"015839fb-fbd9-4f79-ace9-7675fc2f1dd9\",\n          \"fce92aed-d578-4d2e-8114-068f8af4492e\",\n          \"b64d5e15-8257-4af2-b20a-5a750f8940e7\"\n        ]\n    },\n    {\n        \"personId\": \"2ae4935b-9659-44c3-977f-61fac20d0538\",\n        \"name\": \"person-name2\",\n        \"userData\": \"User-provided data attached to the person.\",\n            \"persistedFaceIds\": [\n            \"30ea1073-cc9e-4652-b1e3-d08fb7b95315\",\n            \"fbd2a038-dbff-452c-8e79-2ee81b1aa84e\"\n        ]\n    }\n]"
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}": {
      "delete": {
        "description": "Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature(s) in the person entry will all be deleted.\n<h4>Http Method</h4>\nDELETE",
        "operationId": "599ade5c6ac60f11b48b5aa2",
        "summary": "LargePersonGroup Person - Delete",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person is not found.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "LargePersonGroupNotFound",
                  "message": "Large person group is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature(s).\n<h4>Http Method</h4>\nGET",
        "operationId": "599add376ac60f11b48b5aa0",
        "summary": "LargePersonGroup Person - Get",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns the person's information.\n<br/>\n<br/> JSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>personId</td>\n            <th>String</th>\n            <td>personId of the retrieved person.</td>\n        </tr>\n        <tr>\n            <td>persistedFaceIds</td>\n            <th>Array</th>\n            <td>persistedFaceIds of registered faces in the person.</td>\n        </tr>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Person's display name.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to the person.</td>\n        </tr>\n    </tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "personId": "25985303-c537-4467-b41d-bdb45cd95ca1",
                "persistedFaceIds": [
                  "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                  "fce92aed-d578-4d2e-8114-068f8af4492e",
                  "b64d5e15-8257-4af2-b20a-5a750f8940e7"
                ],
                "name": "person-name",
                "userData": "User-provided data attached to the person."
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person is not found.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonNotFound",
                  "message": "Person is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update name or userData of a person.\n<h4>Http Method</h4>\nPATCH",
        "operationId": "599ade043a7b9412a4d53f41",
        "summary": "LargePersonGroup Person - Update",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"name\": \"person-name\",\n    \"userData\": \"User-provided data attached to the person.\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>name</td>\n            <th>String</th>\n            <td>Name of the created person, maximum length is 128.</td>\n        </tr>\n        <tr>\n            <td>userData (optional)</td>\n            <th>String</th>\n            <td>Optional user defined data for the person. Length should not exceed 16KB.</td>\n        </tr>\n    </tbody>\n</table>"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is empty.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'name' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>JSON parsing error.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'name' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "Person number reached maximum limit.\n<br />\nError code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>QuotaExceeded</td>\n            <td>Person number reached large person group level limit.</td>\n        </tr>\n        <tr>\n            <td>QuotaExceeded</td>\n            <td>Person number reached subscription level limit.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Person number reached subscription level limit."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person is not found.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersonNotFound",
                  "message": "Person is not found."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}": {
      "delete": {
        "description": "Delete a face from a person in a large person group by specified largePersonGroupId, personId and persistedFaceId.\n<br /> Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed\nin parallel.\n<br />\n<h4>Http Method</h4>\nDELETE",
        "operationId": "599ae2966ac60f11b48b5aa3",
        "summary": "LargePersonGroup Person - Delete Face",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of the target persisted face.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face is not found.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person is not found.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceNotFound",
                  "message": "Persisted face is not found."
                }
              }
            }
          },
          "409": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>ConcurrentOperationConflict</td>\n            <td>Concurrent operation conflict on requested resource.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "ConcurrentOperationConflict",
                  "message": "Concurrent operation conflict on requested resource."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve person face information. The persisted person face is specified by its largePersonGroupId, personId and persistedFaceId.\n<h4>Http Method</h4>\nGET",
        "operationId": "599ae1b63a7b9412a4d53f43",
        "summary": "LargePersonGroup Person - Get Face",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of the target persisted face.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns target persisted face's information (persistedFaceId and userData).\n<br/>\n<br/> JSON fields in response body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>persistedFaceId</td>\n            <th>String</th>\n            <td>The persistedFaceId of the target face.</td>\n        </tr>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>User-provided data attached to the face.</td>\n        </tr>\n    </tbody>\n</table>\n",
            "examples": {
              "application/json": {
                "persistedFaceId": "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
                "userData": "User-provided data attached to the person face."
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face is not found.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person is not found.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceNotFound",
                  "message": "Persisted face is not found."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update a person persisted face's userData field.\n<h4>Http Method</h4>\nPATCH\n",
        "operationId": "599ae2013a7b9412a4d53f44",
        "summary": "LargePersonGroup Person - Update Face",
        "parameters": [
          {
            "name": "largePersonGroupId",
            "in": "path",
            "description": "largePersonGroupId of the target large person group.",
            "required": true,
            "type": "string"
          },
          {
            "name": "personId",
            "in": "path",
            "description": "personId of the target person.",
            "required": true,
            "type": "string"
          },
          {
            "name": "persistedFaceId",
            "in": "path",
            "description": "persistedFaceId of the target persisted face.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"userData\": \"User-provided data attached to the person face.\"\n}"
            },
            "description": "JSON fields in request body:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Fields</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>userData</td>\n            <th>String</th>\n            <td>Attach userData to person's persisted face. The size limit is 1KB.</td>\n        </tr>\n    </tbody>\n</table>\n"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A successful call returns an empty response body."
          },
          "400": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>'userData' is too long.</td>\n        </tr>\n        <tr>\n            <td>BadArgument</td>\n            <td>Request body is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "'userData' is too long."
                }
              }
            }
          },
          "401": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Unspecified</td>\n            <td>Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 403,
                  "message": "Out of call volume quota. Quota will be replenished in 2 days."
                }
              }
            }
          },
          "404": {
            "description": "Error code and message returned in JSON:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Error Message Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face is not found.</td>\n        </tr>\n        <tr>\n            <td>PersistedFaceNotFound</td>\n            <td>Persisted face ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person is not found.</td>\n        </tr>\n        <tr>\n            <td>PersonNotFound</td>\n            <td>Person ID is invalid.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group is not found.</td>\n        </tr>\n        <tr>\n            <td>LargePersonGroupNotFound</td>\n            <td>Large person group ID is invalid.</td>\n        </tr>\n    </tbody>\n</table>",
            "examples": {
              "application/json": {
                "error": {
                  "code": "PersistedFaceNotFound",
                  "message": "Persisted face is not found."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. Only \"application/json\" is valid for this API.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid Media Type."
                }
              }
            }
          },
          "429": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "statusCode": 429,
                  "message": "Rate limit is exceeded. Try again in 26 seconds."
                }
              }
            }
          }
        }
      }
    },
    "/operations/{operation_id}": {
      "get": {
        "description": "Get status of a snapshot operation.",
        "operationId": "operationstatus-get",
        "summary": "Snapshot - Get Operation Status",
        "parameters": [
          {
            "name": "operation_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": null
          }
        }
      }
    },
    "/snapshots": {
      "post": {
        "description": "Take a snapshot for an object.",
        "operationId": "snapshot-take",
        "summary": "Snapshot - Take",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n    \"type\": \"PersonGroup\",\n    \"objectId\": \"test_snapshot\",\n    \"applyScope\": [\"f9b96b36-1f5e-4021-8959-51527e26e6d3\"],\n    \"userData\": \"{user provided user data}\"\n}"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null
          }
        }
      },
      "get": {
        "description": "List all of the user's accessible snapshots with information.",
        "operationId": "snapshot-list",
        "summary": "Snapshot - List",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "type": "string"
          },
          {
            "name": "applyScope",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": null
          }
        }
      }
    },
    "/snapshots/{snapshot_id}/apply": {
      "post": {
        "description": "Apply a snapshot, providing a user-specified object id.",
        "operationId": "snapshot-apply",
        "summary": "Snapshot - Apply",
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n\t\"objectId\": \"person_group_id1\",\n\t\"mode\": \"CreateNew\"\n}"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null
          }
        }
      }
    },
    "/snapshots/{snapshot_id}": {
      "get": {
        "description": "Get information of a snapshot.",
        "operationId": "snapshot-get",
        "summary": "Snapshot - Get",
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": null
          }
        }
      },
      "delete": {
        "description": "Delete a snapshot.",
        "operationId": "snapshot-delete",
        "summary": "Snapshot - Delete",
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": null
          }
        }
      },
      "patch": {
        "description": "Update properties of a snapshot.",
        "operationId": "snapshot-update",
        "summary": "Snapshot - Update",
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "example": "{\n\t\"applyScope\": [\"25985303-c537-4467-b41d-bdb45cd95ca1\"],\n\t\"userData\": \"{user provided user data}\"\n}"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": null
          }
        }
      }
    }
  },
  "tags": []
}